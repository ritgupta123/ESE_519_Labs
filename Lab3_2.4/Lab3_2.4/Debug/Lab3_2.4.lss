
Lab3_2.4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000036  00800100  00000d38  00000dcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d38  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800136  00800136  00000e02  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a03  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d0  00000000  00000000  00001913  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000487  00000000  00000000  000020e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  0000256c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048d  00000000  00000000  000026b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000038f  00000000  00000000  00002b41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002ed0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_10>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_13>
  38:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e3       	ldi	r30, 0x38	; 56
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 33       	cpi	r26, 0x36	; 54
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e3       	ldi	r26, 0x36	; 54
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 34       	cpi	r26, 0x47	; 71
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 70 01 	call	0x2e0	; 0x2e0 <main>
  9e:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:
void uart_init(void);

static FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
static FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

int uart_putchar(char c, FILE *stream) {
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
	if (c == '\n') {
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <uart_putchar+0xe>
		uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	85 ff       	sbrs	r24, 5
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <uart_putchar+0x12>
	UDR0 = c;
  be:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <uart_getchar>:

int uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
  ca:	e0 ec       	ldi	r30, 0xC0	; 192
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	ec f7       	brge	.-6      	; 0xce <uart_getchar+0x4>
	return UDR0;
  d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	08 95       	ret

000000dc <uart_init>:

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
  dc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
  e0:	87 e6       	ldi	r24, 0x67	; 103
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
  e6:	e0 ec       	ldi	r30, 0xC0	; 192
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	8d 7f       	andi	r24, 0xFD	; 253
  ee:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    // Redirect stdin and stdout so functions like printf and getchar work.
	stdout = &uart_output;
  fc:	e1 e4       	ldi	r30, 0x41	; 65
  fe:	f1 e0       	ldi	r31, 0x01	; 1
 100:	8e e0       	ldi	r24, 0x0E	; 14
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	93 83       	std	Z+3, r25	; 0x03
 106:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	91 83       	std	Z+1, r25	; 0x01
 10e:	80 83       	st	Z, r24
 110:	08 95       	ret

00000112 <timer1_init>:
volatile bool edges_detected = 0;
int num_overflows = 0;

void timer1_init()
{
	TCCR1B |= (1 << CS10);      // Enable the timer with no prescaling
 112:	e1 e8       	ldi	r30, 0x81	; 129
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	80 83       	st	Z, r24
	
	TCNT1 = 0;	// Initialize the timer count value to 0
 11c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 120:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	TCCR1A |= (1 << COM1A0);	// COmpare output mode - Toggle OC1A on Compare Match
 124:	e0 e8       	ldi	r30, 0x80	; 128
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	
	TIMSK1 = (1 << OCIE1A);		// Enable output compare A match interrupt enable
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	OCR1A = 80;					// Initialize the output compare value
 134:	80 e5       	ldi	r24, 0x50	; 80
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 13c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	sei();						// Enable global interrupts
 140:	78 94       	sei
 142:	08 95       	ret

00000144 <__vector_11>:
}

ISR(TIMER1_COMPA_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	TCNT1 = 0;		// Initialize the timer count value to 0
 158:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 15c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	//TCCR1A &= ~(1 << COM1A0);	// Disable the output compare on timer1
	
	TIMSK1 &= ~(1 << OCIE1A);	// Disable the output compare match interrupt
 160:	ef e6       	ldi	r30, 0x6F	; 111
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	80 83       	st	Z, r24
					
	TCCR1B |= (1 << ICES1);	// Enable the input capture trigger on rising edge
 16a:	a1 e8       	ldi	r26, 0x81	; 129
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	8c 91       	ld	r24, X
 170:	80 64       	ori	r24, 0x40	; 64
 172:	8c 93       	st	X, r24
	 	
	TIMSK1 = (1 << ICIE1);	// Enable the input capture interrupt	
 174:	80 e2       	ldi	r24, 0x20	; 32
 176:	80 83       	st	Z, r24
	
	TIMSK1 |= (1 < TOIE1);	// Enable the overflow interrupt
 178:	80 81       	ld	r24, Z
 17a:	80 83       	st	Z, r24
	
	sei();						// Enable global interrupts
 17c:	78 94       	sei
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
	
}
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <__vector_13>:

ISR(TIMER1_OVF_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
	num_overflows++;
 1b4:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <__data_end>
 1b8:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <__data_end+0x1>
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <__data_end+0x1>
 1c2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <__data_end>
}
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <__vector_10>:

ISR(TIMER1_CAPT_vect)
{
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	// Check if trigger is set on rising edge
	if (TCCR1B & (1 << ICES1))
 1ea:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1ee:	86 ff       	sbrs	r24, 6
 1f0:	14 c0       	rjmp	.+40     	; 0x21a <__vector_10+0x46>
	{
		rising_edge_time = ICR1;	// Get the time at which rising edge is received
 1f2:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 1f6:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 1fa:	a0 e0       	ldi	r26, 0x00	; 0
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <rising_edge_time>
 202:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <rising_edge_time+0x1>
 206:	a0 93 3b 01 	sts	0x013B, r26	; 0x80013b <rising_edge_time+0x2>
 20a:	b0 93 3c 01 	sts	0x013C, r27	; 0x80013c <rising_edge_time+0x3>
		TCCR1B &= ~(1 << ICES1);		// Enable the input capture trigger on falling edge
 20e:	e1 e8       	ldi	r30, 0x81	; 129
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	8f 7b       	andi	r24, 0xBF	; 191
 216:	80 83       	st	Z, r24
 218:	16 c0       	rjmp	.+44     	; 0x246 <__vector_10+0x72>
	}
	else
	{
		falling_edge_time = ICR1;	// Get the time at which falling edge is received
 21a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 21e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 222:	a0 e0       	ldi	r26, 0x00	; 0
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <falling_edge_time>
 22a:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <falling_edge_time+0x1>
 22e:	a0 93 3f 01 	sts	0x013F, r26	; 0x80013f <falling_edge_time+0x2>
 232:	b0 93 40 01 	sts	0x0140, r27	; 0x800140 <falling_edge_time+0x3>
		TCCR1B |= (1 << ICES1);		// Enable the input capture trigger on rising edge
 236:	e1 e8       	ldi	r30, 0x81	; 129
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	80 64       	ori	r24, 0x40	; 64
 23e:	80 83       	st	Z, r24
		edges_detected = 1;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <edges_detected>
	}
}
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	bf 91       	pop	r27
 24c:	af 91       	pop	r26
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <timer0_init>:

// Initialize the timer and interrupts
void timer0_init()
{
	TCNT0 = 0;	// Initialize the timer count value to 0
 25c:	16 bc       	out	0x26, r1	; 38
	
	TCCR0A |= (1 << COM0A0);	// Sets the toggle OC0A on Compare Match mode
 25e:	84 b5       	in	r24, 0x24	; 36
 260:	80 64       	ori	r24, 0x40	; 64
 262:	84 bd       	out	0x24, r24	; 36
	
	TCCR0A |= (1 << WGM01);		// Set the mode of operation of timer to CTC
 264:	84 b5       	in	r24, 0x24	; 36
 266:	82 60       	ori	r24, 0x02	; 2
 268:	84 bd       	out	0x24, r24	; 36
	
	OCR0A = (int)(MIN_BUZZER_CYCLE_COUNT / 2);					// Initialize the output compare value
 26a:	8b e3       	ldi	r24, 0x3B	; 59
 26c:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 = (1 << OCIE0A);		// Enable output compare A match interrupt enable
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	TCCR0B |= (1 << CS00) | (1 << CS01);      // Enable the timer with prescaler(64) specification
 274:	85 b5       	in	r24, 0x25	; 37
 276:	83 60       	ori	r24, 0x03	; 3
 278:	85 bd       	out	0x25, r24	; 37
 27a:	08 95       	ret

0000027c <get_cycle_count>:
	//sei();						// Enable global interrupts
}

int get_cycle_count(int pulse_width)
{
	if (pulse_width < 150)
 27c:	86 39       	cpi	r24, 0x96	; 150
 27e:	91 05       	cpc	r25, r1
 280:	d4 f0       	brlt	.+52     	; 0x2b6 <get_cycle_count+0x3a>
		return 119;		
	else if (pulse_width < 444)
 282:	8c 3b       	cpi	r24, 0xBC	; 188
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	92 07       	cpc	r25, r18
 288:	cc f0       	brlt	.+50     	; 0x2bc <get_cycle_count+0x40>
		return 127;
	else if (pulse_width < 738)
 28a:	82 3e       	cpi	r24, 0xE2	; 226
 28c:	22 e0       	ldi	r18, 0x02	; 2
 28e:	92 07       	cpc	r25, r18
 290:	c4 f0       	brlt	.+48     	; 0x2c2 <get_cycle_count+0x46>
		return 142;
	else if (pulse_width < 1032)
 292:	88 30       	cpi	r24, 0x08	; 8
 294:	24 e0       	ldi	r18, 0x04	; 4
 296:	92 07       	cpc	r25, r18
 298:	bc f0       	brlt	.+46     	; 0x2c8 <get_cycle_count+0x4c>
		return 159;
	else if (pulse_width < 1326)
 29a:	8e 32       	cpi	r24, 0x2E	; 46
 29c:	25 e0       	ldi	r18, 0x05	; 5
 29e:	92 07       	cpc	r25, r18
 2a0:	b4 f0       	brlt	.+44     	; 0x2ce <get_cycle_count+0x52>
		return 179;
	else if (pulse_width < 1620)
 2a2:	84 35       	cpi	r24, 0x54	; 84
 2a4:	26 e0       	ldi	r18, 0x06	; 6
 2a6:	92 07       	cpc	r25, r18
 2a8:	ac f0       	brlt	.+42     	; 0x2d4 <get_cycle_count+0x58>
		return 190;
	else if (pulse_width < 1914)
 2aa:	8a 37       	cpi	r24, 0x7A	; 122
 2ac:	97 40       	sbci	r25, 0x07	; 7
 2ae:	ac f0       	brlt	.+42     	; 0x2da <get_cycle_count+0x5e>
		return 213;
	else
		return 239;
 2b0:	8f ee       	ldi	r24, 0xEF	; 239
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	08 95       	ret
}

int get_cycle_count(int pulse_width)
{
	if (pulse_width < 150)
		return 119;		
 2b6:	87 e7       	ldi	r24, 0x77	; 119
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	08 95       	ret
	else if (pulse_width < 444)
		return 127;
 2bc:	8f e7       	ldi	r24, 0x7F	; 127
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	08 95       	ret
	else if (pulse_width < 738)
		return 142;
 2c2:	8e e8       	ldi	r24, 0x8E	; 142
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	08 95       	ret
	else if (pulse_width < 1032)
		return 159;
 2c8:	8f e9       	ldi	r24, 0x9F	; 159
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	08 95       	ret
	else if (pulse_width < 1326)
		return 179;
 2ce:	83 eb       	ldi	r24, 0xB3	; 179
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	08 95       	ret
	else if (pulse_width < 1620)
		return 190;
 2d4:	8e eb       	ldi	r24, 0xBE	; 190
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	08 95       	ret
	else if (pulse_width < 1914)
		return 213;
 2da:	85 ed       	ldi	r24, 0xD5	; 213
 2dc:	90 e0       	ldi	r25, 0x00	; 0
	else
		return 239;
}
 2de:	08 95       	ret

000002e0 <main>:

int main(void)
{
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	cd b7       	in	r28, 0x3d	; 61
 2e6:	de b7       	in	r29, 0x3e	; 62
 2e8:	c0 54       	subi	r28, 0x40	; 64
 2ea:	d1 09       	sbc	r29, r1
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
	uart_init();
 2f6:	0e 94 6e 00 	call	0xdc	; 0xdc <uart_init>

	//printf("Initializing system\n");
		
	DDRB = 0x02;		// Set PB1 to be output pin and PB0 as input pin
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x40;		// For buzzer
 2fe:	90 e4       	ldi	r25, 0x40	; 64
 300:	9a b9       	out	0x0a, r25	; 10
	
    PORTB = (1 << 1);	// Set output pin to high	
 302:	85 b9       	out	0x05, r24	; 5
	
	// Initialize the timer
	timer0_init();
 304:	0e 94 2e 01 	call	0x25c	; 0x25c <timer0_init>
	timer1_init();
 308:	0e 94 89 00 	call	0x112	; 0x112 <timer1_init>
			{
				num_clock_ticks = falling_edge_time - rising_edge_time;
			}
			else
			{
				num_clock_ticks = (NUM_TOTAL_TICKS - rising_edge_time) + (num_overflows * NUM_TOTAL_TICKS) + falling_edge_time;
 30c:	88 24       	eor	r8, r8
 30e:	8a 94       	dec	r8
 310:	98 2c       	mov	r9, r8
 312:	a1 2c       	mov	r10, r1
 314:	b1 2c       	mov	r11, r1
			}
			pulse_width = num_clock_ticks * CLOCK_TIME_PERIOD_US;
			
			// Print the width on terminal
			char result[64];
			snprintf(result, 64, "Pulse width is %ld\n", pulse_width);
 316:	0f 2e       	mov	r0, r31
 318:	fc e1       	ldi	r31, 0x1C	; 28
 31a:	cf 2e       	mov	r12, r31
 31c:	f1 e0       	ldi	r31, 0x01	; 1
 31e:	df 2e       	mov	r13, r31
 320:	f0 2d       	mov	r31, r0
 322:	68 94       	set
 324:	77 24       	eor	r7, r7
 326:	76 f8       	bld	r7, 6
 328:	ce 01       	movw	r24, r28
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	7c 01       	movw	r14, r24
		
			// Update the OCR0A value depending on pulse width
				
			OCR0A = get_cycle_count(pulse_width);
			
			printf("%d \n", OCR0A);
 32e:	00 e3       	ldi	r16, 0x30	; 48
 330:	11 e0       	ldi	r17, 0x01	; 1
	timer1_init();
	
	while(1)
	{
		//printf("edges\n");
		if (edges_detected) 
 332:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <edges_detected>
 336:	88 23       	and	r24, r24
 338:	e1 f3       	breq	.-8      	; 0x332 <main+0x52>
		{
			long int pulse_width, num_clock_ticks;
			
			// Get the pulse width
			if (num_overflows == 0)
 33a:	a0 91 36 01 	lds	r26, 0x0136	; 0x800136 <__data_end>
 33e:	b0 91 37 01 	lds	r27, 0x0137	; 0x800137 <__data_end+0x1>
 342:	10 97       	sbiw	r26, 0x00	; 0
 344:	b9 f4       	brne	.+46     	; 0x374 <main+0x94>
			{
				num_clock_ticks = falling_edge_time - rising_edge_time;
 346:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <falling_edge_time>
 34a:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <falling_edge_time+0x1>
 34e:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <falling_edge_time+0x2>
 352:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <falling_edge_time+0x3>
 356:	20 91 39 01 	lds	r18, 0x0139	; 0x800139 <rising_edge_time>
 35a:	30 91 3a 01 	lds	r19, 0x013A	; 0x80013a <rising_edge_time+0x1>
 35e:	40 91 3b 01 	lds	r20, 0x013B	; 0x80013b <rising_edge_time+0x2>
 362:	50 91 3c 01 	lds	r21, 0x013C	; 0x80013c <rising_edge_time+0x3>
 366:	bc 01       	movw	r22, r24
 368:	cd 01       	movw	r24, r26
 36a:	62 1b       	sub	r22, r18
 36c:	73 0b       	sbc	r23, r19
 36e:	84 0b       	sbc	r24, r20
 370:	95 0b       	sbc	r25, r21
 372:	28 c0       	rjmp	.+80     	; 0x3c4 <main+0xe4>
			}
			else
			{
				num_clock_ticks = (NUM_TOTAL_TICKS - rising_edge_time) + (num_overflows * NUM_TOTAL_TICKS) + falling_edge_time;
 374:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <rising_edge_time>
 378:	50 91 3a 01 	lds	r21, 0x013A	; 0x80013a <rising_edge_time+0x1>
 37c:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <rising_edge_time+0x2>
 380:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <rising_edge_time+0x3>
 384:	14 01       	movw	r2, r8
 386:	25 01       	movw	r4, r10
 388:	24 1a       	sub	r2, r20
 38a:	35 0a       	sbc	r3, r21
 38c:	46 0a       	sbc	r4, r22
 38e:	57 0a       	sbc	r5, r23
 390:	2f ef       	ldi	r18, 0xFF	; 255
 392:	3f ef       	ldi	r19, 0xFF	; 255
 394:	0e 94 46 03 	call	0x68c	; 0x68c <__usmulhisi3>
 398:	ab 01       	movw	r20, r22
 39a:	bc 01       	movw	r22, r24
 39c:	42 0d       	add	r20, r2
 39e:	53 1d       	adc	r21, r3
 3a0:	64 1d       	adc	r22, r4
 3a2:	75 1d       	adc	r23, r5
 3a4:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <falling_edge_time>
 3a8:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <falling_edge_time+0x1>
 3ac:	a0 91 3f 01 	lds	r26, 0x013F	; 0x80013f <falling_edge_time+0x2>
 3b0:	b0 91 40 01 	lds	r27, 0x0140	; 0x800140 <falling_edge_time+0x3>
 3b4:	1a 01       	movw	r2, r20
 3b6:	2b 01       	movw	r4, r22
 3b8:	28 0e       	add	r2, r24
 3ba:	39 1e       	adc	r3, r25
 3bc:	4a 1e       	adc	r4, r26
 3be:	5b 1e       	adc	r5, r27
 3c0:	c2 01       	movw	r24, r4
 3c2:	b1 01       	movw	r22, r2
			}
			pulse_width = num_clock_ticks * CLOCK_TIME_PERIOD_US;
 3c4:	0e 94 4d 02 	call	0x49a	; 0x49a <__floatsisf>
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	40 e8       	ldi	r20, 0x80	; 128
 3ce:	5d e3       	ldi	r21, 0x3D	; 61
 3d0:	0e 94 b1 02 	call	0x562	; 0x562 <__mulsf3>
 3d4:	0e 94 15 02 	call	0x42a	; 0x42a <__fixsfsi>
 3d8:	56 2e       	mov	r5, r22
 3da:	67 2e       	mov	r6, r23
			
			// Print the width on terminal
			char result[64];
			snprintf(result, 64, "Pulse width is %ld\n", pulse_width);
 3dc:	9f 93       	push	r25
 3de:	8f 93       	push	r24
 3e0:	7f 93       	push	r23
 3e2:	6f 93       	push	r22
 3e4:	df 92       	push	r13
 3e6:	cf 92       	push	r12
 3e8:	1f 92       	push	r1
 3ea:	7f 92       	push	r7
 3ec:	ff 92       	push	r15
 3ee:	ef 92       	push	r14
 3f0:	0e 94 a2 03 	call	0x744	; 0x744 <snprintf>
			puts(result);
 3f4:	c7 01       	movw	r24, r14
 3f6:	0e 94 72 03 	call	0x6e4	; 0x6e4 <puts>
		
			// Update the OCR0A value depending on pulse width
				
			OCR0A = get_cycle_count(pulse_width);
 3fa:	85 2d       	mov	r24, r5
 3fc:	96 2d       	mov	r25, r6
 3fe:	0e 94 3e 01 	call	0x27c	; 0x27c <get_cycle_count>
 402:	87 bd       	out	0x27, r24	; 39
			
			printf("%d \n", OCR0A);
 404:	87 b5       	in	r24, 0x27	; 39
 406:	1f 92       	push	r1
 408:	8f 93       	push	r24
 40a:	1f 93       	push	r17
 40c:	0f 93       	push	r16
 40e:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <printf>
			
			num_overflows = 0;
 412:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <__data_end+0x1>
 416:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <__data_end>
			edges_detected = 0;
 41a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <edges_detected>
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	f8 94       	cli
 422:	de bf       	out	0x3e, r29	; 62
 424:	0f be       	out	0x3f, r0	; 63
 426:	cd bf       	out	0x3d, r28	; 61
 428:	84 cf       	rjmp	.-248    	; 0x332 <main+0x52>

0000042a <__fixsfsi>:
 42a:	0e 94 1c 02 	call	0x438	; 0x438 <__fixunssfsi>
 42e:	68 94       	set
 430:	b1 11       	cpse	r27, r1
 432:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_szero>
 436:	08 95       	ret

00000438 <__fixunssfsi>:
 438:	0e 94 90 02 	call	0x520	; 0x520 <__fp_splitA>
 43c:	88 f0       	brcs	.+34     	; 0x460 <__fixunssfsi+0x28>
 43e:	9f 57       	subi	r25, 0x7F	; 127
 440:	98 f0       	brcs	.+38     	; 0x468 <__fixunssfsi+0x30>
 442:	b9 2f       	mov	r27, r25
 444:	99 27       	eor	r25, r25
 446:	b7 51       	subi	r27, 0x17	; 23
 448:	b0 f0       	brcs	.+44     	; 0x476 <__fixunssfsi+0x3e>
 44a:	e1 f0       	breq	.+56     	; 0x484 <__fixunssfsi+0x4c>
 44c:	66 0f       	add	r22, r22
 44e:	77 1f       	adc	r23, r23
 450:	88 1f       	adc	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	1a f0       	brmi	.+6      	; 0x45c <__fixunssfsi+0x24>
 456:	ba 95       	dec	r27
 458:	c9 f7       	brne	.-14     	; 0x44c <__fixunssfsi+0x14>
 45a:	14 c0       	rjmp	.+40     	; 0x484 <__fixunssfsi+0x4c>
 45c:	b1 30       	cpi	r27, 0x01	; 1
 45e:	91 f0       	breq	.+36     	; 0x484 <__fixunssfsi+0x4c>
 460:	0e 94 aa 02 	call	0x554	; 0x554 <__fp_zero>
 464:	b1 e0       	ldi	r27, 0x01	; 1
 466:	08 95       	ret
 468:	0c 94 aa 02 	jmp	0x554	; 0x554 <__fp_zero>
 46c:	67 2f       	mov	r22, r23
 46e:	78 2f       	mov	r23, r24
 470:	88 27       	eor	r24, r24
 472:	b8 5f       	subi	r27, 0xF8	; 248
 474:	39 f0       	breq	.+14     	; 0x484 <__fixunssfsi+0x4c>
 476:	b9 3f       	cpi	r27, 0xF9	; 249
 478:	cc f3       	brlt	.-14     	; 0x46c <__fixunssfsi+0x34>
 47a:	86 95       	lsr	r24
 47c:	77 95       	ror	r23
 47e:	67 95       	ror	r22
 480:	b3 95       	inc	r27
 482:	d9 f7       	brne	.-10     	; 0x47a <__fixunssfsi+0x42>
 484:	3e f4       	brtc	.+14     	; 0x494 <__fixunssfsi+0x5c>
 486:	90 95       	com	r25
 488:	80 95       	com	r24
 48a:	70 95       	com	r23
 48c:	61 95       	neg	r22
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	8f 4f       	sbci	r24, 0xFF	; 255
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	08 95       	ret

00000496 <__floatunsisf>:
 496:	e8 94       	clt
 498:	09 c0       	rjmp	.+18     	; 0x4ac <__floatsisf+0x12>

0000049a <__floatsisf>:
 49a:	97 fb       	bst	r25, 7
 49c:	3e f4       	brtc	.+14     	; 0x4ac <__floatsisf+0x12>
 49e:	90 95       	com	r25
 4a0:	80 95       	com	r24
 4a2:	70 95       	com	r23
 4a4:	61 95       	neg	r22
 4a6:	7f 4f       	sbci	r23, 0xFF	; 255
 4a8:	8f 4f       	sbci	r24, 0xFF	; 255
 4aa:	9f 4f       	sbci	r25, 0xFF	; 255
 4ac:	99 23       	and	r25, r25
 4ae:	a9 f0       	breq	.+42     	; 0x4da <__floatsisf+0x40>
 4b0:	f9 2f       	mov	r31, r25
 4b2:	96 e9       	ldi	r25, 0x96	; 150
 4b4:	bb 27       	eor	r27, r27
 4b6:	93 95       	inc	r25
 4b8:	f6 95       	lsr	r31
 4ba:	87 95       	ror	r24
 4bc:	77 95       	ror	r23
 4be:	67 95       	ror	r22
 4c0:	b7 95       	ror	r27
 4c2:	f1 11       	cpse	r31, r1
 4c4:	f8 cf       	rjmp	.-16     	; 0x4b6 <__floatsisf+0x1c>
 4c6:	fa f4       	brpl	.+62     	; 0x506 <__floatsisf+0x6c>
 4c8:	bb 0f       	add	r27, r27
 4ca:	11 f4       	brne	.+4      	; 0x4d0 <__floatsisf+0x36>
 4cc:	60 ff       	sbrs	r22, 0
 4ce:	1b c0       	rjmp	.+54     	; 0x506 <__floatsisf+0x6c>
 4d0:	6f 5f       	subi	r22, 0xFF	; 255
 4d2:	7f 4f       	sbci	r23, 0xFF	; 255
 4d4:	8f 4f       	sbci	r24, 0xFF	; 255
 4d6:	9f 4f       	sbci	r25, 0xFF	; 255
 4d8:	16 c0       	rjmp	.+44     	; 0x506 <__floatsisf+0x6c>
 4da:	88 23       	and	r24, r24
 4dc:	11 f0       	breq	.+4      	; 0x4e2 <__floatsisf+0x48>
 4de:	96 e9       	ldi	r25, 0x96	; 150
 4e0:	11 c0       	rjmp	.+34     	; 0x504 <__floatsisf+0x6a>
 4e2:	77 23       	and	r23, r23
 4e4:	21 f0       	breq	.+8      	; 0x4ee <__floatsisf+0x54>
 4e6:	9e e8       	ldi	r25, 0x8E	; 142
 4e8:	87 2f       	mov	r24, r23
 4ea:	76 2f       	mov	r23, r22
 4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <__floatsisf+0x5e>
 4ee:	66 23       	and	r22, r22
 4f0:	71 f0       	breq	.+28     	; 0x50e <__floatsisf+0x74>
 4f2:	96 e8       	ldi	r25, 0x86	; 134
 4f4:	86 2f       	mov	r24, r22
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	2a f0       	brmi	.+10     	; 0x506 <__floatsisf+0x6c>
 4fc:	9a 95       	dec	r25
 4fe:	66 0f       	add	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	88 1f       	adc	r24, r24
 504:	da f7       	brpl	.-10     	; 0x4fc <__floatsisf+0x62>
 506:	88 0f       	add	r24, r24
 508:	96 95       	lsr	r25
 50a:	87 95       	ror	r24
 50c:	97 f9       	bld	r25, 7
 50e:	08 95       	ret

00000510 <__fp_split3>:
 510:	57 fd       	sbrc	r21, 7
 512:	90 58       	subi	r25, 0x80	; 128
 514:	44 0f       	add	r20, r20
 516:	55 1f       	adc	r21, r21
 518:	59 f0       	breq	.+22     	; 0x530 <__fp_splitA+0x10>
 51a:	5f 3f       	cpi	r21, 0xFF	; 255
 51c:	71 f0       	breq	.+28     	; 0x53a <__fp_splitA+0x1a>
 51e:	47 95       	ror	r20

00000520 <__fp_splitA>:
 520:	88 0f       	add	r24, r24
 522:	97 fb       	bst	r25, 7
 524:	99 1f       	adc	r25, r25
 526:	61 f0       	breq	.+24     	; 0x540 <__fp_splitA+0x20>
 528:	9f 3f       	cpi	r25, 0xFF	; 255
 52a:	79 f0       	breq	.+30     	; 0x54a <__fp_splitA+0x2a>
 52c:	87 95       	ror	r24
 52e:	08 95       	ret
 530:	12 16       	cp	r1, r18
 532:	13 06       	cpc	r1, r19
 534:	14 06       	cpc	r1, r20
 536:	55 1f       	adc	r21, r21
 538:	f2 cf       	rjmp	.-28     	; 0x51e <__fp_split3+0xe>
 53a:	46 95       	lsr	r20
 53c:	f1 df       	rcall	.-30     	; 0x520 <__fp_splitA>
 53e:	08 c0       	rjmp	.+16     	; 0x550 <__fp_splitA+0x30>
 540:	16 16       	cp	r1, r22
 542:	17 06       	cpc	r1, r23
 544:	18 06       	cpc	r1, r24
 546:	99 1f       	adc	r25, r25
 548:	f1 cf       	rjmp	.-30     	; 0x52c <__fp_splitA+0xc>
 54a:	86 95       	lsr	r24
 54c:	71 05       	cpc	r23, r1
 54e:	61 05       	cpc	r22, r1
 550:	08 94       	sec
 552:	08 95       	ret

00000554 <__fp_zero>:
 554:	e8 94       	clt

00000556 <__fp_szero>:
 556:	bb 27       	eor	r27, r27
 558:	66 27       	eor	r22, r22
 55a:	77 27       	eor	r23, r23
 55c:	cb 01       	movw	r24, r22
 55e:	97 f9       	bld	r25, 7
 560:	08 95       	ret

00000562 <__mulsf3>:
 562:	0e 94 c4 02 	call	0x588	; 0x588 <__mulsf3x>
 566:	0c 94 35 03 	jmp	0x66a	; 0x66a <__fp_round>
 56a:	0e 94 27 03 	call	0x64e	; 0x64e <__fp_pscA>
 56e:	38 f0       	brcs	.+14     	; 0x57e <__mulsf3+0x1c>
 570:	0e 94 2e 03 	call	0x65c	; 0x65c <__fp_pscB>
 574:	20 f0       	brcs	.+8      	; 0x57e <__mulsf3+0x1c>
 576:	95 23       	and	r25, r21
 578:	11 f0       	breq	.+4      	; 0x57e <__mulsf3+0x1c>
 57a:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_inf>
 57e:	0c 94 24 03 	jmp	0x648	; 0x648 <__fp_nan>
 582:	11 24       	eor	r1, r1
 584:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_szero>

00000588 <__mulsf3x>:
 588:	0e 94 88 02 	call	0x510	; 0x510 <__fp_split3>
 58c:	70 f3       	brcs	.-36     	; 0x56a <__mulsf3+0x8>

0000058e <__mulsf3_pse>:
 58e:	95 9f       	mul	r25, r21
 590:	c1 f3       	breq	.-16     	; 0x582 <__mulsf3+0x20>
 592:	95 0f       	add	r25, r21
 594:	50 e0       	ldi	r21, 0x00	; 0
 596:	55 1f       	adc	r21, r21
 598:	62 9f       	mul	r22, r18
 59a:	f0 01       	movw	r30, r0
 59c:	72 9f       	mul	r23, r18
 59e:	bb 27       	eor	r27, r27
 5a0:	f0 0d       	add	r31, r0
 5a2:	b1 1d       	adc	r27, r1
 5a4:	63 9f       	mul	r22, r19
 5a6:	aa 27       	eor	r26, r26
 5a8:	f0 0d       	add	r31, r0
 5aa:	b1 1d       	adc	r27, r1
 5ac:	aa 1f       	adc	r26, r26
 5ae:	64 9f       	mul	r22, r20
 5b0:	66 27       	eor	r22, r22
 5b2:	b0 0d       	add	r27, r0
 5b4:	a1 1d       	adc	r26, r1
 5b6:	66 1f       	adc	r22, r22
 5b8:	82 9f       	mul	r24, r18
 5ba:	22 27       	eor	r18, r18
 5bc:	b0 0d       	add	r27, r0
 5be:	a1 1d       	adc	r26, r1
 5c0:	62 1f       	adc	r22, r18
 5c2:	73 9f       	mul	r23, r19
 5c4:	b0 0d       	add	r27, r0
 5c6:	a1 1d       	adc	r26, r1
 5c8:	62 1f       	adc	r22, r18
 5ca:	83 9f       	mul	r24, r19
 5cc:	a0 0d       	add	r26, r0
 5ce:	61 1d       	adc	r22, r1
 5d0:	22 1f       	adc	r18, r18
 5d2:	74 9f       	mul	r23, r20
 5d4:	33 27       	eor	r19, r19
 5d6:	a0 0d       	add	r26, r0
 5d8:	61 1d       	adc	r22, r1
 5da:	23 1f       	adc	r18, r19
 5dc:	84 9f       	mul	r24, r20
 5de:	60 0d       	add	r22, r0
 5e0:	21 1d       	adc	r18, r1
 5e2:	82 2f       	mov	r24, r18
 5e4:	76 2f       	mov	r23, r22
 5e6:	6a 2f       	mov	r22, r26
 5e8:	11 24       	eor	r1, r1
 5ea:	9f 57       	subi	r25, 0x7F	; 127
 5ec:	50 40       	sbci	r21, 0x00	; 0
 5ee:	9a f0       	brmi	.+38     	; 0x616 <__mulsf3_pse+0x88>
 5f0:	f1 f0       	breq	.+60     	; 0x62e <__mulsf3_pse+0xa0>
 5f2:	88 23       	and	r24, r24
 5f4:	4a f0       	brmi	.+18     	; 0x608 <__mulsf3_pse+0x7a>
 5f6:	ee 0f       	add	r30, r30
 5f8:	ff 1f       	adc	r31, r31
 5fa:	bb 1f       	adc	r27, r27
 5fc:	66 1f       	adc	r22, r22
 5fe:	77 1f       	adc	r23, r23
 600:	88 1f       	adc	r24, r24
 602:	91 50       	subi	r25, 0x01	; 1
 604:	50 40       	sbci	r21, 0x00	; 0
 606:	a9 f7       	brne	.-22     	; 0x5f2 <__mulsf3_pse+0x64>
 608:	9e 3f       	cpi	r25, 0xFE	; 254
 60a:	51 05       	cpc	r21, r1
 60c:	80 f0       	brcs	.+32     	; 0x62e <__mulsf3_pse+0xa0>
 60e:	0c 94 1e 03 	jmp	0x63c	; 0x63c <__fp_inf>
 612:	0c 94 ab 02 	jmp	0x556	; 0x556 <__fp_szero>
 616:	5f 3f       	cpi	r21, 0xFF	; 255
 618:	e4 f3       	brlt	.-8      	; 0x612 <__mulsf3_pse+0x84>
 61a:	98 3e       	cpi	r25, 0xE8	; 232
 61c:	d4 f3       	brlt	.-12     	; 0x612 <__mulsf3_pse+0x84>
 61e:	86 95       	lsr	r24
 620:	77 95       	ror	r23
 622:	67 95       	ror	r22
 624:	b7 95       	ror	r27
 626:	f7 95       	ror	r31
 628:	e7 95       	ror	r30
 62a:	9f 5f       	subi	r25, 0xFF	; 255
 62c:	c1 f7       	brne	.-16     	; 0x61e <__mulsf3_pse+0x90>
 62e:	fe 2b       	or	r31, r30
 630:	88 0f       	add	r24, r24
 632:	91 1d       	adc	r25, r1
 634:	96 95       	lsr	r25
 636:	87 95       	ror	r24
 638:	97 f9       	bld	r25, 7
 63a:	08 95       	ret

0000063c <__fp_inf>:
 63c:	97 f9       	bld	r25, 7
 63e:	9f 67       	ori	r25, 0x7F	; 127
 640:	80 e8       	ldi	r24, 0x80	; 128
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	08 95       	ret

00000648 <__fp_nan>:
 648:	9f ef       	ldi	r25, 0xFF	; 255
 64a:	80 ec       	ldi	r24, 0xC0	; 192
 64c:	08 95       	ret

0000064e <__fp_pscA>:
 64e:	00 24       	eor	r0, r0
 650:	0a 94       	dec	r0
 652:	16 16       	cp	r1, r22
 654:	17 06       	cpc	r1, r23
 656:	18 06       	cpc	r1, r24
 658:	09 06       	cpc	r0, r25
 65a:	08 95       	ret

0000065c <__fp_pscB>:
 65c:	00 24       	eor	r0, r0
 65e:	0a 94       	dec	r0
 660:	12 16       	cp	r1, r18
 662:	13 06       	cpc	r1, r19
 664:	14 06       	cpc	r1, r20
 666:	05 06       	cpc	r0, r21
 668:	08 95       	ret

0000066a <__fp_round>:
 66a:	09 2e       	mov	r0, r25
 66c:	03 94       	inc	r0
 66e:	00 0c       	add	r0, r0
 670:	11 f4       	brne	.+4      	; 0x676 <__fp_round+0xc>
 672:	88 23       	and	r24, r24
 674:	52 f0       	brmi	.+20     	; 0x68a <__fp_round+0x20>
 676:	bb 0f       	add	r27, r27
 678:	40 f4       	brcc	.+16     	; 0x68a <__fp_round+0x20>
 67a:	bf 2b       	or	r27, r31
 67c:	11 f4       	brne	.+4      	; 0x682 <__fp_round+0x18>
 67e:	60 ff       	sbrs	r22, 0
 680:	04 c0       	rjmp	.+8      	; 0x68a <__fp_round+0x20>
 682:	6f 5f       	subi	r22, 0xFF	; 255
 684:	7f 4f       	sbci	r23, 0xFF	; 255
 686:	8f 4f       	sbci	r24, 0xFF	; 255
 688:	9f 4f       	sbci	r25, 0xFF	; 255
 68a:	08 95       	ret

0000068c <__usmulhisi3>:
 68c:	0e 94 4d 03 	call	0x69a	; 0x69a <__umulhisi3>

00000690 <__usmulhisi3_tail>:
 690:	b7 ff       	sbrs	r27, 7
 692:	08 95       	ret
 694:	82 1b       	sub	r24, r18
 696:	93 0b       	sbc	r25, r19
 698:	08 95       	ret

0000069a <__umulhisi3>:
 69a:	a2 9f       	mul	r26, r18
 69c:	b0 01       	movw	r22, r0
 69e:	b3 9f       	mul	r27, r19
 6a0:	c0 01       	movw	r24, r0
 6a2:	a3 9f       	mul	r26, r19
 6a4:	70 0d       	add	r23, r0
 6a6:	81 1d       	adc	r24, r1
 6a8:	11 24       	eor	r1, r1
 6aa:	91 1d       	adc	r25, r1
 6ac:	b2 9f       	mul	r27, r18
 6ae:	70 0d       	add	r23, r0
 6b0:	81 1d       	adc	r24, r1
 6b2:	11 24       	eor	r1, r1
 6b4:	91 1d       	adc	r25, r1
 6b6:	08 95       	ret

000006b8 <printf>:
 6b8:	a0 e0       	ldi	r26, 0x00	; 0
 6ba:	b0 e0       	ldi	r27, 0x00	; 0
 6bc:	e2 e6       	ldi	r30, 0x62	; 98
 6be:	f3 e0       	ldi	r31, 0x03	; 3
 6c0:	0c 94 73 06 	jmp	0xce6	; 0xce6 <__prologue_saves__+0x20>
 6c4:	ae 01       	movw	r20, r28
 6c6:	4b 5f       	subi	r20, 0xFB	; 251
 6c8:	5f 4f       	sbci	r21, 0xFF	; 255
 6ca:	fa 01       	movw	r30, r20
 6cc:	61 91       	ld	r22, Z+
 6ce:	71 91       	ld	r23, Z+
 6d0:	af 01       	movw	r20, r30
 6d2:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <__iob+0x2>
 6d6:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <__iob+0x3>
 6da:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <vfprintf>
 6de:	e2 e0       	ldi	r30, 0x02	; 2
 6e0:	0c 94 8f 06 	jmp	0xd1e	; 0xd1e <__epilogue_restores__+0x20>

000006e4 <puts>:
 6e4:	0f 93       	push	r16
 6e6:	1f 93       	push	r17
 6e8:	cf 93       	push	r28
 6ea:	df 93       	push	r29
 6ec:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <__iob+0x2>
 6f0:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <__iob+0x3>
 6f4:	23 81       	ldd	r18, Z+3	; 0x03
 6f6:	21 ff       	sbrs	r18, 1
 6f8:	1b c0       	rjmp	.+54     	; 0x730 <puts+0x4c>
 6fa:	8c 01       	movw	r16, r24
 6fc:	d0 e0       	ldi	r29, 0x00	; 0
 6fe:	c0 e0       	ldi	r28, 0x00	; 0
 700:	f8 01       	movw	r30, r16
 702:	81 91       	ld	r24, Z+
 704:	8f 01       	movw	r16, r30
 706:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <__iob+0x2>
 70a:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <__iob+0x3>
 70e:	db 01       	movw	r26, r22
 710:	18 96       	adiw	r26, 0x08	; 8
 712:	ed 91       	ld	r30, X+
 714:	fc 91       	ld	r31, X
 716:	19 97       	sbiw	r26, 0x09	; 9
 718:	88 23       	and	r24, r24
 71a:	31 f0       	breq	.+12     	; 0x728 <puts+0x44>
 71c:	09 95       	icall
 71e:	89 2b       	or	r24, r25
 720:	79 f3       	breq	.-34     	; 0x700 <puts+0x1c>
 722:	df ef       	ldi	r29, 0xFF	; 255
 724:	cf ef       	ldi	r28, 0xFF	; 255
 726:	ec cf       	rjmp	.-40     	; 0x700 <puts+0x1c>
 728:	8a e0       	ldi	r24, 0x0A	; 10
 72a:	09 95       	icall
 72c:	89 2b       	or	r24, r25
 72e:	19 f0       	breq	.+6      	; 0x736 <puts+0x52>
 730:	8f ef       	ldi	r24, 0xFF	; 255
 732:	9f ef       	ldi	r25, 0xFF	; 255
 734:	02 c0       	rjmp	.+4      	; 0x73a <puts+0x56>
 736:	8d 2f       	mov	r24, r29
 738:	9c 2f       	mov	r25, r28
 73a:	df 91       	pop	r29
 73c:	cf 91       	pop	r28
 73e:	1f 91       	pop	r17
 740:	0f 91       	pop	r16
 742:	08 95       	ret

00000744 <snprintf>:
 744:	ae e0       	ldi	r26, 0x0E	; 14
 746:	b0 e0       	ldi	r27, 0x00	; 0
 748:	e8 ea       	ldi	r30, 0xA8	; 168
 74a:	f3 e0       	ldi	r31, 0x03	; 3
 74c:	0c 94 71 06 	jmp	0xce2	; 0xce2 <__prologue_saves__+0x1c>
 750:	0d 89       	ldd	r16, Y+21	; 0x15
 752:	1e 89       	ldd	r17, Y+22	; 0x16
 754:	8f 89       	ldd	r24, Y+23	; 0x17
 756:	98 8d       	ldd	r25, Y+24	; 0x18
 758:	26 e0       	ldi	r18, 0x06	; 6
 75a:	2c 83       	std	Y+4, r18	; 0x04
 75c:	1a 83       	std	Y+2, r17	; 0x02
 75e:	09 83       	std	Y+1, r16	; 0x01
 760:	97 ff       	sbrs	r25, 7
 762:	02 c0       	rjmp	.+4      	; 0x768 <snprintf+0x24>
 764:	80 e0       	ldi	r24, 0x00	; 0
 766:	90 e8       	ldi	r25, 0x80	; 128
 768:	01 97       	sbiw	r24, 0x01	; 1
 76a:	9e 83       	std	Y+6, r25	; 0x06
 76c:	8d 83       	std	Y+5, r24	; 0x05
 76e:	ae 01       	movw	r20, r28
 770:	45 5e       	subi	r20, 0xE5	; 229
 772:	5f 4f       	sbci	r21, 0xFF	; 255
 774:	69 8d       	ldd	r22, Y+25	; 0x19
 776:	7a 8d       	ldd	r23, Y+26	; 0x1a
 778:	ce 01       	movw	r24, r28
 77a:	01 96       	adiw	r24, 0x01	; 1
 77c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <vfprintf>
 780:	4d 81       	ldd	r20, Y+5	; 0x05
 782:	5e 81       	ldd	r21, Y+6	; 0x06
 784:	57 fd       	sbrc	r21, 7
 786:	0a c0       	rjmp	.+20     	; 0x79c <snprintf+0x58>
 788:	2f 81       	ldd	r18, Y+7	; 0x07
 78a:	38 85       	ldd	r19, Y+8	; 0x08
 78c:	42 17       	cp	r20, r18
 78e:	53 07       	cpc	r21, r19
 790:	0c f4       	brge	.+2      	; 0x794 <snprintf+0x50>
 792:	9a 01       	movw	r18, r20
 794:	f8 01       	movw	r30, r16
 796:	e2 0f       	add	r30, r18
 798:	f3 1f       	adc	r31, r19
 79a:	10 82       	st	Z, r1
 79c:	2e 96       	adiw	r28, 0x0e	; 14
 79e:	e4 e0       	ldi	r30, 0x04	; 4
 7a0:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__epilogue_restores__+0x1c>

000007a4 <vfprintf>:
 7a4:	ab e0       	ldi	r26, 0x0B	; 11
 7a6:	b0 e0       	ldi	r27, 0x00	; 0
 7a8:	e8 ed       	ldi	r30, 0xD8	; 216
 7aa:	f3 e0       	ldi	r31, 0x03	; 3
 7ac:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__prologue_saves__>
 7b0:	6c 01       	movw	r12, r24
 7b2:	7b 01       	movw	r14, r22
 7b4:	8a 01       	movw	r16, r20
 7b6:	fc 01       	movw	r30, r24
 7b8:	17 82       	std	Z+7, r1	; 0x07
 7ba:	16 82       	std	Z+6, r1	; 0x06
 7bc:	83 81       	ldd	r24, Z+3	; 0x03
 7be:	81 ff       	sbrs	r24, 1
 7c0:	cc c1       	rjmp	.+920    	; 0xb5a <__stack+0x25b>
 7c2:	ce 01       	movw	r24, r28
 7c4:	01 96       	adiw	r24, 0x01	; 1
 7c6:	3c 01       	movw	r6, r24
 7c8:	f6 01       	movw	r30, r12
 7ca:	93 81       	ldd	r25, Z+3	; 0x03
 7cc:	f7 01       	movw	r30, r14
 7ce:	93 fd       	sbrc	r25, 3
 7d0:	85 91       	lpm	r24, Z+
 7d2:	93 ff       	sbrs	r25, 3
 7d4:	81 91       	ld	r24, Z+
 7d6:	7f 01       	movw	r14, r30
 7d8:	88 23       	and	r24, r24
 7da:	09 f4       	brne	.+2      	; 0x7de <vfprintf+0x3a>
 7dc:	ba c1       	rjmp	.+884    	; 0xb52 <__stack+0x253>
 7de:	85 32       	cpi	r24, 0x25	; 37
 7e0:	39 f4       	brne	.+14     	; 0x7f0 <vfprintf+0x4c>
 7e2:	93 fd       	sbrc	r25, 3
 7e4:	85 91       	lpm	r24, Z+
 7e6:	93 ff       	sbrs	r25, 3
 7e8:	81 91       	ld	r24, Z+
 7ea:	7f 01       	movw	r14, r30
 7ec:	85 32       	cpi	r24, 0x25	; 37
 7ee:	29 f4       	brne	.+10     	; 0x7fa <vfprintf+0x56>
 7f0:	b6 01       	movw	r22, r12
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0e 94 c9 05 	call	0xb92	; 0xb92 <fputc>
 7f8:	e7 cf       	rjmp	.-50     	; 0x7c8 <vfprintf+0x24>
 7fa:	91 2c       	mov	r9, r1
 7fc:	21 2c       	mov	r2, r1
 7fe:	31 2c       	mov	r3, r1
 800:	ff e1       	ldi	r31, 0x1F	; 31
 802:	f3 15       	cp	r31, r3
 804:	d8 f0       	brcs	.+54     	; 0x83c <vfprintf+0x98>
 806:	8b 32       	cpi	r24, 0x2B	; 43
 808:	79 f0       	breq	.+30     	; 0x828 <vfprintf+0x84>
 80a:	38 f4       	brcc	.+14     	; 0x81a <vfprintf+0x76>
 80c:	80 32       	cpi	r24, 0x20	; 32
 80e:	79 f0       	breq	.+30     	; 0x82e <vfprintf+0x8a>
 810:	83 32       	cpi	r24, 0x23	; 35
 812:	a1 f4       	brne	.+40     	; 0x83c <vfprintf+0x98>
 814:	23 2d       	mov	r18, r3
 816:	20 61       	ori	r18, 0x10	; 16
 818:	1d c0       	rjmp	.+58     	; 0x854 <vfprintf+0xb0>
 81a:	8d 32       	cpi	r24, 0x2D	; 45
 81c:	61 f0       	breq	.+24     	; 0x836 <vfprintf+0x92>
 81e:	80 33       	cpi	r24, 0x30	; 48
 820:	69 f4       	brne	.+26     	; 0x83c <vfprintf+0x98>
 822:	23 2d       	mov	r18, r3
 824:	21 60       	ori	r18, 0x01	; 1
 826:	16 c0       	rjmp	.+44     	; 0x854 <vfprintf+0xb0>
 828:	83 2d       	mov	r24, r3
 82a:	82 60       	ori	r24, 0x02	; 2
 82c:	38 2e       	mov	r3, r24
 82e:	e3 2d       	mov	r30, r3
 830:	e4 60       	ori	r30, 0x04	; 4
 832:	3e 2e       	mov	r3, r30
 834:	2a c0       	rjmp	.+84     	; 0x88a <vfprintf+0xe6>
 836:	f3 2d       	mov	r31, r3
 838:	f8 60       	ori	r31, 0x08	; 8
 83a:	1d c0       	rjmp	.+58     	; 0x876 <vfprintf+0xd2>
 83c:	37 fc       	sbrc	r3, 7
 83e:	2d c0       	rjmp	.+90     	; 0x89a <vfprintf+0xf6>
 840:	20 ed       	ldi	r18, 0xD0	; 208
 842:	28 0f       	add	r18, r24
 844:	2a 30       	cpi	r18, 0x0A	; 10
 846:	40 f0       	brcs	.+16     	; 0x858 <vfprintf+0xb4>
 848:	8e 32       	cpi	r24, 0x2E	; 46
 84a:	b9 f4       	brne	.+46     	; 0x87a <vfprintf+0xd6>
 84c:	36 fc       	sbrc	r3, 6
 84e:	81 c1       	rjmp	.+770    	; 0xb52 <__stack+0x253>
 850:	23 2d       	mov	r18, r3
 852:	20 64       	ori	r18, 0x40	; 64
 854:	32 2e       	mov	r3, r18
 856:	19 c0       	rjmp	.+50     	; 0x88a <vfprintf+0xe6>
 858:	36 fe       	sbrs	r3, 6
 85a:	06 c0       	rjmp	.+12     	; 0x868 <vfprintf+0xc4>
 85c:	8a e0       	ldi	r24, 0x0A	; 10
 85e:	98 9e       	mul	r9, r24
 860:	20 0d       	add	r18, r0
 862:	11 24       	eor	r1, r1
 864:	92 2e       	mov	r9, r18
 866:	11 c0       	rjmp	.+34     	; 0x88a <vfprintf+0xe6>
 868:	ea e0       	ldi	r30, 0x0A	; 10
 86a:	2e 9e       	mul	r2, r30
 86c:	20 0d       	add	r18, r0
 86e:	11 24       	eor	r1, r1
 870:	22 2e       	mov	r2, r18
 872:	f3 2d       	mov	r31, r3
 874:	f0 62       	ori	r31, 0x20	; 32
 876:	3f 2e       	mov	r3, r31
 878:	08 c0       	rjmp	.+16     	; 0x88a <vfprintf+0xe6>
 87a:	8c 36       	cpi	r24, 0x6C	; 108
 87c:	21 f4       	brne	.+8      	; 0x886 <vfprintf+0xe2>
 87e:	83 2d       	mov	r24, r3
 880:	80 68       	ori	r24, 0x80	; 128
 882:	38 2e       	mov	r3, r24
 884:	02 c0       	rjmp	.+4      	; 0x88a <vfprintf+0xe6>
 886:	88 36       	cpi	r24, 0x68	; 104
 888:	41 f4       	brne	.+16     	; 0x89a <vfprintf+0xf6>
 88a:	f7 01       	movw	r30, r14
 88c:	93 fd       	sbrc	r25, 3
 88e:	85 91       	lpm	r24, Z+
 890:	93 ff       	sbrs	r25, 3
 892:	81 91       	ld	r24, Z+
 894:	7f 01       	movw	r14, r30
 896:	81 11       	cpse	r24, r1
 898:	b3 cf       	rjmp	.-154    	; 0x800 <vfprintf+0x5c>
 89a:	98 2f       	mov	r25, r24
 89c:	9f 7d       	andi	r25, 0xDF	; 223
 89e:	95 54       	subi	r25, 0x45	; 69
 8a0:	93 30       	cpi	r25, 0x03	; 3
 8a2:	28 f4       	brcc	.+10     	; 0x8ae <vfprintf+0x10a>
 8a4:	0c 5f       	subi	r16, 0xFC	; 252
 8a6:	1f 4f       	sbci	r17, 0xFF	; 255
 8a8:	9f e3       	ldi	r25, 0x3F	; 63
 8aa:	99 83       	std	Y+1, r25	; 0x01
 8ac:	0d c0       	rjmp	.+26     	; 0x8c8 <vfprintf+0x124>
 8ae:	83 36       	cpi	r24, 0x63	; 99
 8b0:	31 f0       	breq	.+12     	; 0x8be <vfprintf+0x11a>
 8b2:	83 37       	cpi	r24, 0x73	; 115
 8b4:	71 f0       	breq	.+28     	; 0x8d2 <vfprintf+0x12e>
 8b6:	83 35       	cpi	r24, 0x53	; 83
 8b8:	09 f0       	breq	.+2      	; 0x8bc <vfprintf+0x118>
 8ba:	59 c0       	rjmp	.+178    	; 0x96e <__stack+0x6f>
 8bc:	21 c0       	rjmp	.+66     	; 0x900 <__stack+0x1>
 8be:	f8 01       	movw	r30, r16
 8c0:	80 81       	ld	r24, Z
 8c2:	89 83       	std	Y+1, r24	; 0x01
 8c4:	0e 5f       	subi	r16, 0xFE	; 254
 8c6:	1f 4f       	sbci	r17, 0xFF	; 255
 8c8:	88 24       	eor	r8, r8
 8ca:	83 94       	inc	r8
 8cc:	91 2c       	mov	r9, r1
 8ce:	53 01       	movw	r10, r6
 8d0:	13 c0       	rjmp	.+38     	; 0x8f8 <vfprintf+0x154>
 8d2:	28 01       	movw	r4, r16
 8d4:	f2 e0       	ldi	r31, 0x02	; 2
 8d6:	4f 0e       	add	r4, r31
 8d8:	51 1c       	adc	r5, r1
 8da:	f8 01       	movw	r30, r16
 8dc:	a0 80       	ld	r10, Z
 8de:	b1 80       	ldd	r11, Z+1	; 0x01
 8e0:	36 fe       	sbrs	r3, 6
 8e2:	03 c0       	rjmp	.+6      	; 0x8ea <vfprintf+0x146>
 8e4:	69 2d       	mov	r22, r9
 8e6:	70 e0       	ldi	r23, 0x00	; 0
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <vfprintf+0x14a>
 8ea:	6f ef       	ldi	r22, 0xFF	; 255
 8ec:	7f ef       	ldi	r23, 0xFF	; 255
 8ee:	c5 01       	movw	r24, r10
 8f0:	0e 94 be 05 	call	0xb7c	; 0xb7c <strnlen>
 8f4:	4c 01       	movw	r8, r24
 8f6:	82 01       	movw	r16, r4
 8f8:	f3 2d       	mov	r31, r3
 8fa:	ff 77       	andi	r31, 0x7F	; 127
 8fc:	3f 2e       	mov	r3, r31
 8fe:	16 c0       	rjmp	.+44     	; 0x92c <__stack+0x2d>
 900:	28 01       	movw	r4, r16
 902:	22 e0       	ldi	r18, 0x02	; 2
 904:	42 0e       	add	r4, r18
 906:	51 1c       	adc	r5, r1
 908:	f8 01       	movw	r30, r16
 90a:	a0 80       	ld	r10, Z
 90c:	b1 80       	ldd	r11, Z+1	; 0x01
 90e:	36 fe       	sbrs	r3, 6
 910:	03 c0       	rjmp	.+6      	; 0x918 <__stack+0x19>
 912:	69 2d       	mov	r22, r9
 914:	70 e0       	ldi	r23, 0x00	; 0
 916:	02 c0       	rjmp	.+4      	; 0x91c <__stack+0x1d>
 918:	6f ef       	ldi	r22, 0xFF	; 255
 91a:	7f ef       	ldi	r23, 0xFF	; 255
 91c:	c5 01       	movw	r24, r10
 91e:	0e 94 b3 05 	call	0xb66	; 0xb66 <strnlen_P>
 922:	4c 01       	movw	r8, r24
 924:	f3 2d       	mov	r31, r3
 926:	f0 68       	ori	r31, 0x80	; 128
 928:	3f 2e       	mov	r3, r31
 92a:	82 01       	movw	r16, r4
 92c:	33 fc       	sbrc	r3, 3
 92e:	1b c0       	rjmp	.+54     	; 0x966 <__stack+0x67>
 930:	82 2d       	mov	r24, r2
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	88 16       	cp	r8, r24
 936:	99 06       	cpc	r9, r25
 938:	b0 f4       	brcc	.+44     	; 0x966 <__stack+0x67>
 93a:	b6 01       	movw	r22, r12
 93c:	80 e2       	ldi	r24, 0x20	; 32
 93e:	90 e0       	ldi	r25, 0x00	; 0
 940:	0e 94 c9 05 	call	0xb92	; 0xb92 <fputc>
 944:	2a 94       	dec	r2
 946:	f4 cf       	rjmp	.-24     	; 0x930 <__stack+0x31>
 948:	f5 01       	movw	r30, r10
 94a:	37 fc       	sbrc	r3, 7
 94c:	85 91       	lpm	r24, Z+
 94e:	37 fe       	sbrs	r3, 7
 950:	81 91       	ld	r24, Z+
 952:	5f 01       	movw	r10, r30
 954:	b6 01       	movw	r22, r12
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	0e 94 c9 05 	call	0xb92	; 0xb92 <fputc>
 95c:	21 10       	cpse	r2, r1
 95e:	2a 94       	dec	r2
 960:	21 e0       	ldi	r18, 0x01	; 1
 962:	82 1a       	sub	r8, r18
 964:	91 08       	sbc	r9, r1
 966:	81 14       	cp	r8, r1
 968:	91 04       	cpc	r9, r1
 96a:	71 f7       	brne	.-36     	; 0x948 <__stack+0x49>
 96c:	e8 c0       	rjmp	.+464    	; 0xb3e <__stack+0x23f>
 96e:	84 36       	cpi	r24, 0x64	; 100
 970:	11 f0       	breq	.+4      	; 0x976 <__stack+0x77>
 972:	89 36       	cpi	r24, 0x69	; 105
 974:	41 f5       	brne	.+80     	; 0x9c6 <__stack+0xc7>
 976:	f8 01       	movw	r30, r16
 978:	37 fe       	sbrs	r3, 7
 97a:	07 c0       	rjmp	.+14     	; 0x98a <__stack+0x8b>
 97c:	60 81       	ld	r22, Z
 97e:	71 81       	ldd	r23, Z+1	; 0x01
 980:	82 81       	ldd	r24, Z+2	; 0x02
 982:	93 81       	ldd	r25, Z+3	; 0x03
 984:	0c 5f       	subi	r16, 0xFC	; 252
 986:	1f 4f       	sbci	r17, 0xFF	; 255
 988:	08 c0       	rjmp	.+16     	; 0x99a <__stack+0x9b>
 98a:	60 81       	ld	r22, Z
 98c:	71 81       	ldd	r23, Z+1	; 0x01
 98e:	07 2e       	mov	r0, r23
 990:	00 0c       	add	r0, r0
 992:	88 0b       	sbc	r24, r24
 994:	99 0b       	sbc	r25, r25
 996:	0e 5f       	subi	r16, 0xFE	; 254
 998:	1f 4f       	sbci	r17, 0xFF	; 255
 99a:	f3 2d       	mov	r31, r3
 99c:	ff 76       	andi	r31, 0x6F	; 111
 99e:	3f 2e       	mov	r3, r31
 9a0:	97 ff       	sbrs	r25, 7
 9a2:	09 c0       	rjmp	.+18     	; 0x9b6 <__stack+0xb7>
 9a4:	90 95       	com	r25
 9a6:	80 95       	com	r24
 9a8:	70 95       	com	r23
 9aa:	61 95       	neg	r22
 9ac:	7f 4f       	sbci	r23, 0xFF	; 255
 9ae:	8f 4f       	sbci	r24, 0xFF	; 255
 9b0:	9f 4f       	sbci	r25, 0xFF	; 255
 9b2:	f0 68       	ori	r31, 0x80	; 128
 9b4:	3f 2e       	mov	r3, r31
 9b6:	2a e0       	ldi	r18, 0x0A	; 10
 9b8:	30 e0       	ldi	r19, 0x00	; 0
 9ba:	a3 01       	movw	r20, r6
 9bc:	0e 94 05 06 	call	0xc0a	; 0xc0a <__ultoa_invert>
 9c0:	88 2e       	mov	r8, r24
 9c2:	86 18       	sub	r8, r6
 9c4:	45 c0       	rjmp	.+138    	; 0xa50 <__stack+0x151>
 9c6:	85 37       	cpi	r24, 0x75	; 117
 9c8:	31 f4       	brne	.+12     	; 0x9d6 <__stack+0xd7>
 9ca:	23 2d       	mov	r18, r3
 9cc:	2f 7e       	andi	r18, 0xEF	; 239
 9ce:	b2 2e       	mov	r11, r18
 9d0:	2a e0       	ldi	r18, 0x0A	; 10
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	25 c0       	rjmp	.+74     	; 0xa20 <__stack+0x121>
 9d6:	93 2d       	mov	r25, r3
 9d8:	99 7f       	andi	r25, 0xF9	; 249
 9da:	b9 2e       	mov	r11, r25
 9dc:	8f 36       	cpi	r24, 0x6F	; 111
 9de:	c1 f0       	breq	.+48     	; 0xa10 <__stack+0x111>
 9e0:	18 f4       	brcc	.+6      	; 0x9e8 <__stack+0xe9>
 9e2:	88 35       	cpi	r24, 0x58	; 88
 9e4:	79 f0       	breq	.+30     	; 0xa04 <__stack+0x105>
 9e6:	b5 c0       	rjmp	.+362    	; 0xb52 <__stack+0x253>
 9e8:	80 37       	cpi	r24, 0x70	; 112
 9ea:	19 f0       	breq	.+6      	; 0x9f2 <__stack+0xf3>
 9ec:	88 37       	cpi	r24, 0x78	; 120
 9ee:	21 f0       	breq	.+8      	; 0x9f8 <__stack+0xf9>
 9f0:	b0 c0       	rjmp	.+352    	; 0xb52 <__stack+0x253>
 9f2:	e9 2f       	mov	r30, r25
 9f4:	e0 61       	ori	r30, 0x10	; 16
 9f6:	be 2e       	mov	r11, r30
 9f8:	b4 fe       	sbrs	r11, 4
 9fa:	0d c0       	rjmp	.+26     	; 0xa16 <__stack+0x117>
 9fc:	fb 2d       	mov	r31, r11
 9fe:	f4 60       	ori	r31, 0x04	; 4
 a00:	bf 2e       	mov	r11, r31
 a02:	09 c0       	rjmp	.+18     	; 0xa16 <__stack+0x117>
 a04:	34 fe       	sbrs	r3, 4
 a06:	0a c0       	rjmp	.+20     	; 0xa1c <__stack+0x11d>
 a08:	29 2f       	mov	r18, r25
 a0a:	26 60       	ori	r18, 0x06	; 6
 a0c:	b2 2e       	mov	r11, r18
 a0e:	06 c0       	rjmp	.+12     	; 0xa1c <__stack+0x11d>
 a10:	28 e0       	ldi	r18, 0x08	; 8
 a12:	30 e0       	ldi	r19, 0x00	; 0
 a14:	05 c0       	rjmp	.+10     	; 0xa20 <__stack+0x121>
 a16:	20 e1       	ldi	r18, 0x10	; 16
 a18:	30 e0       	ldi	r19, 0x00	; 0
 a1a:	02 c0       	rjmp	.+4      	; 0xa20 <__stack+0x121>
 a1c:	20 e1       	ldi	r18, 0x10	; 16
 a1e:	32 e0       	ldi	r19, 0x02	; 2
 a20:	f8 01       	movw	r30, r16
 a22:	b7 fe       	sbrs	r11, 7
 a24:	07 c0       	rjmp	.+14     	; 0xa34 <__stack+0x135>
 a26:	60 81       	ld	r22, Z
 a28:	71 81       	ldd	r23, Z+1	; 0x01
 a2a:	82 81       	ldd	r24, Z+2	; 0x02
 a2c:	93 81       	ldd	r25, Z+3	; 0x03
 a2e:	0c 5f       	subi	r16, 0xFC	; 252
 a30:	1f 4f       	sbci	r17, 0xFF	; 255
 a32:	06 c0       	rjmp	.+12     	; 0xa40 <__stack+0x141>
 a34:	60 81       	ld	r22, Z
 a36:	71 81       	ldd	r23, Z+1	; 0x01
 a38:	80 e0       	ldi	r24, 0x00	; 0
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	0e 5f       	subi	r16, 0xFE	; 254
 a3e:	1f 4f       	sbci	r17, 0xFF	; 255
 a40:	a3 01       	movw	r20, r6
 a42:	0e 94 05 06 	call	0xc0a	; 0xc0a <__ultoa_invert>
 a46:	88 2e       	mov	r8, r24
 a48:	86 18       	sub	r8, r6
 a4a:	fb 2d       	mov	r31, r11
 a4c:	ff 77       	andi	r31, 0x7F	; 127
 a4e:	3f 2e       	mov	r3, r31
 a50:	36 fe       	sbrs	r3, 6
 a52:	0d c0       	rjmp	.+26     	; 0xa6e <__stack+0x16f>
 a54:	23 2d       	mov	r18, r3
 a56:	2e 7f       	andi	r18, 0xFE	; 254
 a58:	a2 2e       	mov	r10, r18
 a5a:	89 14       	cp	r8, r9
 a5c:	58 f4       	brcc	.+22     	; 0xa74 <__stack+0x175>
 a5e:	34 fe       	sbrs	r3, 4
 a60:	0b c0       	rjmp	.+22     	; 0xa78 <__stack+0x179>
 a62:	32 fc       	sbrc	r3, 2
 a64:	09 c0       	rjmp	.+18     	; 0xa78 <__stack+0x179>
 a66:	83 2d       	mov	r24, r3
 a68:	8e 7e       	andi	r24, 0xEE	; 238
 a6a:	a8 2e       	mov	r10, r24
 a6c:	05 c0       	rjmp	.+10     	; 0xa78 <__stack+0x179>
 a6e:	b8 2c       	mov	r11, r8
 a70:	a3 2c       	mov	r10, r3
 a72:	03 c0       	rjmp	.+6      	; 0xa7a <__stack+0x17b>
 a74:	b8 2c       	mov	r11, r8
 a76:	01 c0       	rjmp	.+2      	; 0xa7a <__stack+0x17b>
 a78:	b9 2c       	mov	r11, r9
 a7a:	a4 fe       	sbrs	r10, 4
 a7c:	0f c0       	rjmp	.+30     	; 0xa9c <__stack+0x19d>
 a7e:	fe 01       	movw	r30, r28
 a80:	e8 0d       	add	r30, r8
 a82:	f1 1d       	adc	r31, r1
 a84:	80 81       	ld	r24, Z
 a86:	80 33       	cpi	r24, 0x30	; 48
 a88:	21 f4       	brne	.+8      	; 0xa92 <__stack+0x193>
 a8a:	9a 2d       	mov	r25, r10
 a8c:	99 7e       	andi	r25, 0xE9	; 233
 a8e:	a9 2e       	mov	r10, r25
 a90:	09 c0       	rjmp	.+18     	; 0xaa4 <__stack+0x1a5>
 a92:	a2 fe       	sbrs	r10, 2
 a94:	06 c0       	rjmp	.+12     	; 0xaa2 <__stack+0x1a3>
 a96:	b3 94       	inc	r11
 a98:	b3 94       	inc	r11
 a9a:	04 c0       	rjmp	.+8      	; 0xaa4 <__stack+0x1a5>
 a9c:	8a 2d       	mov	r24, r10
 a9e:	86 78       	andi	r24, 0x86	; 134
 aa0:	09 f0       	breq	.+2      	; 0xaa4 <__stack+0x1a5>
 aa2:	b3 94       	inc	r11
 aa4:	a3 fc       	sbrc	r10, 3
 aa6:	11 c0       	rjmp	.+34     	; 0xaca <__stack+0x1cb>
 aa8:	a0 fe       	sbrs	r10, 0
 aaa:	06 c0       	rjmp	.+12     	; 0xab8 <__stack+0x1b9>
 aac:	b2 14       	cp	r11, r2
 aae:	88 f4       	brcc	.+34     	; 0xad2 <__stack+0x1d3>
 ab0:	28 0c       	add	r2, r8
 ab2:	92 2c       	mov	r9, r2
 ab4:	9b 18       	sub	r9, r11
 ab6:	0e c0       	rjmp	.+28     	; 0xad4 <__stack+0x1d5>
 ab8:	b2 14       	cp	r11, r2
 aba:	60 f4       	brcc	.+24     	; 0xad4 <__stack+0x1d5>
 abc:	b6 01       	movw	r22, r12
 abe:	80 e2       	ldi	r24, 0x20	; 32
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	0e 94 c9 05 	call	0xb92	; 0xb92 <fputc>
 ac6:	b3 94       	inc	r11
 ac8:	f7 cf       	rjmp	.-18     	; 0xab8 <__stack+0x1b9>
 aca:	b2 14       	cp	r11, r2
 acc:	18 f4       	brcc	.+6      	; 0xad4 <__stack+0x1d5>
 ace:	2b 18       	sub	r2, r11
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <__stack+0x1d7>
 ad2:	98 2c       	mov	r9, r8
 ad4:	21 2c       	mov	r2, r1
 ad6:	a4 fe       	sbrs	r10, 4
 ad8:	10 c0       	rjmp	.+32     	; 0xafa <__stack+0x1fb>
 ada:	b6 01       	movw	r22, r12
 adc:	80 e3       	ldi	r24, 0x30	; 48
 ade:	90 e0       	ldi	r25, 0x00	; 0
 ae0:	0e 94 c9 05 	call	0xb92	; 0xb92 <fputc>
 ae4:	a2 fe       	sbrs	r10, 2
 ae6:	17 c0       	rjmp	.+46     	; 0xb16 <__stack+0x217>
 ae8:	a1 fc       	sbrc	r10, 1
 aea:	03 c0       	rjmp	.+6      	; 0xaf2 <__stack+0x1f3>
 aec:	88 e7       	ldi	r24, 0x78	; 120
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	02 c0       	rjmp	.+4      	; 0xaf6 <__stack+0x1f7>
 af2:	88 e5       	ldi	r24, 0x58	; 88
 af4:	90 e0       	ldi	r25, 0x00	; 0
 af6:	b6 01       	movw	r22, r12
 af8:	0c c0       	rjmp	.+24     	; 0xb12 <__stack+0x213>
 afa:	8a 2d       	mov	r24, r10
 afc:	86 78       	andi	r24, 0x86	; 134
 afe:	59 f0       	breq	.+22     	; 0xb16 <__stack+0x217>
 b00:	a1 fe       	sbrs	r10, 1
 b02:	02 c0       	rjmp	.+4      	; 0xb08 <__stack+0x209>
 b04:	8b e2       	ldi	r24, 0x2B	; 43
 b06:	01 c0       	rjmp	.+2      	; 0xb0a <__stack+0x20b>
 b08:	80 e2       	ldi	r24, 0x20	; 32
 b0a:	a7 fc       	sbrc	r10, 7
 b0c:	8d e2       	ldi	r24, 0x2D	; 45
 b0e:	b6 01       	movw	r22, r12
 b10:	90 e0       	ldi	r25, 0x00	; 0
 b12:	0e 94 c9 05 	call	0xb92	; 0xb92 <fputc>
 b16:	89 14       	cp	r8, r9
 b18:	38 f4       	brcc	.+14     	; 0xb28 <__stack+0x229>
 b1a:	b6 01       	movw	r22, r12
 b1c:	80 e3       	ldi	r24, 0x30	; 48
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	0e 94 c9 05 	call	0xb92	; 0xb92 <fputc>
 b24:	9a 94       	dec	r9
 b26:	f7 cf       	rjmp	.-18     	; 0xb16 <__stack+0x217>
 b28:	8a 94       	dec	r8
 b2a:	f3 01       	movw	r30, r6
 b2c:	e8 0d       	add	r30, r8
 b2e:	f1 1d       	adc	r31, r1
 b30:	80 81       	ld	r24, Z
 b32:	b6 01       	movw	r22, r12
 b34:	90 e0       	ldi	r25, 0x00	; 0
 b36:	0e 94 c9 05 	call	0xb92	; 0xb92 <fputc>
 b3a:	81 10       	cpse	r8, r1
 b3c:	f5 cf       	rjmp	.-22     	; 0xb28 <__stack+0x229>
 b3e:	22 20       	and	r2, r2
 b40:	09 f4       	brne	.+2      	; 0xb44 <__stack+0x245>
 b42:	42 ce       	rjmp	.-892    	; 0x7c8 <vfprintf+0x24>
 b44:	b6 01       	movw	r22, r12
 b46:	80 e2       	ldi	r24, 0x20	; 32
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	0e 94 c9 05 	call	0xb92	; 0xb92 <fputc>
 b4e:	2a 94       	dec	r2
 b50:	f6 cf       	rjmp	.-20     	; 0xb3e <__stack+0x23f>
 b52:	f6 01       	movw	r30, r12
 b54:	86 81       	ldd	r24, Z+6	; 0x06
 b56:	97 81       	ldd	r25, Z+7	; 0x07
 b58:	02 c0       	rjmp	.+4      	; 0xb5e <__stack+0x25f>
 b5a:	8f ef       	ldi	r24, 0xFF	; 255
 b5c:	9f ef       	ldi	r25, 0xFF	; 255
 b5e:	2b 96       	adiw	r28, 0x0b	; 11
 b60:	e2 e1       	ldi	r30, 0x12	; 18
 b62:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__epilogue_restores__>

00000b66 <strnlen_P>:
 b66:	fc 01       	movw	r30, r24
 b68:	05 90       	lpm	r0, Z+
 b6a:	61 50       	subi	r22, 0x01	; 1
 b6c:	70 40       	sbci	r23, 0x00	; 0
 b6e:	01 10       	cpse	r0, r1
 b70:	d8 f7       	brcc	.-10     	; 0xb68 <strnlen_P+0x2>
 b72:	80 95       	com	r24
 b74:	90 95       	com	r25
 b76:	8e 0f       	add	r24, r30
 b78:	9f 1f       	adc	r25, r31
 b7a:	08 95       	ret

00000b7c <strnlen>:
 b7c:	fc 01       	movw	r30, r24
 b7e:	61 50       	subi	r22, 0x01	; 1
 b80:	70 40       	sbci	r23, 0x00	; 0
 b82:	01 90       	ld	r0, Z+
 b84:	01 10       	cpse	r0, r1
 b86:	d8 f7       	brcc	.-10     	; 0xb7e <strnlen+0x2>
 b88:	80 95       	com	r24
 b8a:	90 95       	com	r25
 b8c:	8e 0f       	add	r24, r30
 b8e:	9f 1f       	adc	r25, r31
 b90:	08 95       	ret

00000b92 <fputc>:
 b92:	0f 93       	push	r16
 b94:	1f 93       	push	r17
 b96:	cf 93       	push	r28
 b98:	df 93       	push	r29
 b9a:	fb 01       	movw	r30, r22
 b9c:	23 81       	ldd	r18, Z+3	; 0x03
 b9e:	21 fd       	sbrc	r18, 1
 ba0:	03 c0       	rjmp	.+6      	; 0xba8 <fputc+0x16>
 ba2:	8f ef       	ldi	r24, 0xFF	; 255
 ba4:	9f ef       	ldi	r25, 0xFF	; 255
 ba6:	2c c0       	rjmp	.+88     	; 0xc00 <fputc+0x6e>
 ba8:	22 ff       	sbrs	r18, 2
 baa:	16 c0       	rjmp	.+44     	; 0xbd8 <fputc+0x46>
 bac:	46 81       	ldd	r20, Z+6	; 0x06
 bae:	57 81       	ldd	r21, Z+7	; 0x07
 bb0:	24 81       	ldd	r18, Z+4	; 0x04
 bb2:	35 81       	ldd	r19, Z+5	; 0x05
 bb4:	42 17       	cp	r20, r18
 bb6:	53 07       	cpc	r21, r19
 bb8:	44 f4       	brge	.+16     	; 0xbca <fputc+0x38>
 bba:	a0 81       	ld	r26, Z
 bbc:	b1 81       	ldd	r27, Z+1	; 0x01
 bbe:	9d 01       	movw	r18, r26
 bc0:	2f 5f       	subi	r18, 0xFF	; 255
 bc2:	3f 4f       	sbci	r19, 0xFF	; 255
 bc4:	31 83       	std	Z+1, r19	; 0x01
 bc6:	20 83       	st	Z, r18
 bc8:	8c 93       	st	X, r24
 bca:	26 81       	ldd	r18, Z+6	; 0x06
 bcc:	37 81       	ldd	r19, Z+7	; 0x07
 bce:	2f 5f       	subi	r18, 0xFF	; 255
 bd0:	3f 4f       	sbci	r19, 0xFF	; 255
 bd2:	37 83       	std	Z+7, r19	; 0x07
 bd4:	26 83       	std	Z+6, r18	; 0x06
 bd6:	14 c0       	rjmp	.+40     	; 0xc00 <fputc+0x6e>
 bd8:	8b 01       	movw	r16, r22
 bda:	ec 01       	movw	r28, r24
 bdc:	fb 01       	movw	r30, r22
 bde:	00 84       	ldd	r0, Z+8	; 0x08
 be0:	f1 85       	ldd	r31, Z+9	; 0x09
 be2:	e0 2d       	mov	r30, r0
 be4:	09 95       	icall
 be6:	89 2b       	or	r24, r25
 be8:	e1 f6       	brne	.-72     	; 0xba2 <fputc+0x10>
 bea:	d8 01       	movw	r26, r16
 bec:	16 96       	adiw	r26, 0x06	; 6
 bee:	8d 91       	ld	r24, X+
 bf0:	9c 91       	ld	r25, X
 bf2:	17 97       	sbiw	r26, 0x07	; 7
 bf4:	01 96       	adiw	r24, 0x01	; 1
 bf6:	17 96       	adiw	r26, 0x07	; 7
 bf8:	9c 93       	st	X, r25
 bfa:	8e 93       	st	-X, r24
 bfc:	16 97       	sbiw	r26, 0x06	; 6
 bfe:	ce 01       	movw	r24, r28
 c00:	df 91       	pop	r29
 c02:	cf 91       	pop	r28
 c04:	1f 91       	pop	r17
 c06:	0f 91       	pop	r16
 c08:	08 95       	ret

00000c0a <__ultoa_invert>:
 c0a:	fa 01       	movw	r30, r20
 c0c:	aa 27       	eor	r26, r26
 c0e:	28 30       	cpi	r18, 0x08	; 8
 c10:	51 f1       	breq	.+84     	; 0xc66 <__ultoa_invert+0x5c>
 c12:	20 31       	cpi	r18, 0x10	; 16
 c14:	81 f1       	breq	.+96     	; 0xc76 <__ultoa_invert+0x6c>
 c16:	e8 94       	clt
 c18:	6f 93       	push	r22
 c1a:	6e 7f       	andi	r22, 0xFE	; 254
 c1c:	6e 5f       	subi	r22, 0xFE	; 254
 c1e:	7f 4f       	sbci	r23, 0xFF	; 255
 c20:	8f 4f       	sbci	r24, 0xFF	; 255
 c22:	9f 4f       	sbci	r25, 0xFF	; 255
 c24:	af 4f       	sbci	r26, 0xFF	; 255
 c26:	b1 e0       	ldi	r27, 0x01	; 1
 c28:	3e d0       	rcall	.+124    	; 0xca6 <__ultoa_invert+0x9c>
 c2a:	b4 e0       	ldi	r27, 0x04	; 4
 c2c:	3c d0       	rcall	.+120    	; 0xca6 <__ultoa_invert+0x9c>
 c2e:	67 0f       	add	r22, r23
 c30:	78 1f       	adc	r23, r24
 c32:	89 1f       	adc	r24, r25
 c34:	9a 1f       	adc	r25, r26
 c36:	a1 1d       	adc	r26, r1
 c38:	68 0f       	add	r22, r24
 c3a:	79 1f       	adc	r23, r25
 c3c:	8a 1f       	adc	r24, r26
 c3e:	91 1d       	adc	r25, r1
 c40:	a1 1d       	adc	r26, r1
 c42:	6a 0f       	add	r22, r26
 c44:	71 1d       	adc	r23, r1
 c46:	81 1d       	adc	r24, r1
 c48:	91 1d       	adc	r25, r1
 c4a:	a1 1d       	adc	r26, r1
 c4c:	20 d0       	rcall	.+64     	; 0xc8e <__ultoa_invert+0x84>
 c4e:	09 f4       	brne	.+2      	; 0xc52 <__ultoa_invert+0x48>
 c50:	68 94       	set
 c52:	3f 91       	pop	r19
 c54:	2a e0       	ldi	r18, 0x0A	; 10
 c56:	26 9f       	mul	r18, r22
 c58:	11 24       	eor	r1, r1
 c5a:	30 19       	sub	r19, r0
 c5c:	30 5d       	subi	r19, 0xD0	; 208
 c5e:	31 93       	st	Z+, r19
 c60:	de f6       	brtc	.-74     	; 0xc18 <__ultoa_invert+0xe>
 c62:	cf 01       	movw	r24, r30
 c64:	08 95       	ret
 c66:	46 2f       	mov	r20, r22
 c68:	47 70       	andi	r20, 0x07	; 7
 c6a:	40 5d       	subi	r20, 0xD0	; 208
 c6c:	41 93       	st	Z+, r20
 c6e:	b3 e0       	ldi	r27, 0x03	; 3
 c70:	0f d0       	rcall	.+30     	; 0xc90 <__ultoa_invert+0x86>
 c72:	c9 f7       	brne	.-14     	; 0xc66 <__ultoa_invert+0x5c>
 c74:	f6 cf       	rjmp	.-20     	; 0xc62 <__ultoa_invert+0x58>
 c76:	46 2f       	mov	r20, r22
 c78:	4f 70       	andi	r20, 0x0F	; 15
 c7a:	40 5d       	subi	r20, 0xD0	; 208
 c7c:	4a 33       	cpi	r20, 0x3A	; 58
 c7e:	18 f0       	brcs	.+6      	; 0xc86 <__ultoa_invert+0x7c>
 c80:	49 5d       	subi	r20, 0xD9	; 217
 c82:	31 fd       	sbrc	r19, 1
 c84:	40 52       	subi	r20, 0x20	; 32
 c86:	41 93       	st	Z+, r20
 c88:	02 d0       	rcall	.+4      	; 0xc8e <__ultoa_invert+0x84>
 c8a:	a9 f7       	brne	.-22     	; 0xc76 <__ultoa_invert+0x6c>
 c8c:	ea cf       	rjmp	.-44     	; 0xc62 <__ultoa_invert+0x58>
 c8e:	b4 e0       	ldi	r27, 0x04	; 4
 c90:	a6 95       	lsr	r26
 c92:	97 95       	ror	r25
 c94:	87 95       	ror	r24
 c96:	77 95       	ror	r23
 c98:	67 95       	ror	r22
 c9a:	ba 95       	dec	r27
 c9c:	c9 f7       	brne	.-14     	; 0xc90 <__ultoa_invert+0x86>
 c9e:	00 97       	sbiw	r24, 0x00	; 0
 ca0:	61 05       	cpc	r22, r1
 ca2:	71 05       	cpc	r23, r1
 ca4:	08 95       	ret
 ca6:	9b 01       	movw	r18, r22
 ca8:	ac 01       	movw	r20, r24
 caa:	0a 2e       	mov	r0, r26
 cac:	06 94       	lsr	r0
 cae:	57 95       	ror	r21
 cb0:	47 95       	ror	r20
 cb2:	37 95       	ror	r19
 cb4:	27 95       	ror	r18
 cb6:	ba 95       	dec	r27
 cb8:	c9 f7       	brne	.-14     	; 0xcac <__ultoa_invert+0xa2>
 cba:	62 0f       	add	r22, r18
 cbc:	73 1f       	adc	r23, r19
 cbe:	84 1f       	adc	r24, r20
 cc0:	95 1f       	adc	r25, r21
 cc2:	a0 1d       	adc	r26, r0
 cc4:	08 95       	ret

00000cc6 <__prologue_saves__>:
 cc6:	2f 92       	push	r2
 cc8:	3f 92       	push	r3
 cca:	4f 92       	push	r4
 ccc:	5f 92       	push	r5
 cce:	6f 92       	push	r6
 cd0:	7f 92       	push	r7
 cd2:	8f 92       	push	r8
 cd4:	9f 92       	push	r9
 cd6:	af 92       	push	r10
 cd8:	bf 92       	push	r11
 cda:	cf 92       	push	r12
 cdc:	df 92       	push	r13
 cde:	ef 92       	push	r14
 ce0:	ff 92       	push	r15
 ce2:	0f 93       	push	r16
 ce4:	1f 93       	push	r17
 ce6:	cf 93       	push	r28
 ce8:	df 93       	push	r29
 cea:	cd b7       	in	r28, 0x3d	; 61
 cec:	de b7       	in	r29, 0x3e	; 62
 cee:	ca 1b       	sub	r28, r26
 cf0:	db 0b       	sbc	r29, r27
 cf2:	0f b6       	in	r0, 0x3f	; 63
 cf4:	f8 94       	cli
 cf6:	de bf       	out	0x3e, r29	; 62
 cf8:	0f be       	out	0x3f, r0	; 63
 cfa:	cd bf       	out	0x3d, r28	; 61
 cfc:	09 94       	ijmp

00000cfe <__epilogue_restores__>:
 cfe:	2a 88       	ldd	r2, Y+18	; 0x12
 d00:	39 88       	ldd	r3, Y+17	; 0x11
 d02:	48 88       	ldd	r4, Y+16	; 0x10
 d04:	5f 84       	ldd	r5, Y+15	; 0x0f
 d06:	6e 84       	ldd	r6, Y+14	; 0x0e
 d08:	7d 84       	ldd	r7, Y+13	; 0x0d
 d0a:	8c 84       	ldd	r8, Y+12	; 0x0c
 d0c:	9b 84       	ldd	r9, Y+11	; 0x0b
 d0e:	aa 84       	ldd	r10, Y+10	; 0x0a
 d10:	b9 84       	ldd	r11, Y+9	; 0x09
 d12:	c8 84       	ldd	r12, Y+8	; 0x08
 d14:	df 80       	ldd	r13, Y+7	; 0x07
 d16:	ee 80       	ldd	r14, Y+6	; 0x06
 d18:	fd 80       	ldd	r15, Y+5	; 0x05
 d1a:	0c 81       	ldd	r16, Y+4	; 0x04
 d1c:	1b 81       	ldd	r17, Y+3	; 0x03
 d1e:	aa 81       	ldd	r26, Y+2	; 0x02
 d20:	b9 81       	ldd	r27, Y+1	; 0x01
 d22:	ce 0f       	add	r28, r30
 d24:	d1 1d       	adc	r29, r1
 d26:	0f b6       	in	r0, 0x3f	; 63
 d28:	f8 94       	cli
 d2a:	de bf       	out	0x3e, r29	; 62
 d2c:	0f be       	out	0x3f, r0	; 63
 d2e:	cd bf       	out	0x3d, r28	; 61
 d30:	ed 01       	movw	r28, r26
 d32:	08 95       	ret

00000d34 <_exit>:
 d34:	f8 94       	cli

00000d36 <__stop_program>:
 d36:	ff cf       	rjmp	.-2      	; 0xd36 <__stop_program>
