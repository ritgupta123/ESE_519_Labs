
Lab3_3.3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00000e52  00000ee6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800148  00800148  00000f2e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aa5  00000000  00000000  0000104c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007e8  00000000  00000000  00001af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000055f  00000000  00000000  000022d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002838  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b9  00000000  00000000  000029a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003c8  00000000  00000000  00002e5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00003225  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_10>
  2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_13>
  38:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e5       	ldi	r30, 0x52	; 82
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 34       	cpi	r26, 0x48	; 72
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e4       	ldi	r26, 0x48	; 72
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 35       	cpi	r26, 0x59	; 89
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 92 01 	call	0x324	; 0x324 <main>
  9e:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:
void uart_init(void);

static FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
static FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

int uart_putchar(char c, FILE *stream) {
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
	if (c == '\n') {
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <uart_putchar+0xe>
		uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	85 ff       	sbrs	r24, 5
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <uart_putchar+0x12>
	UDR0 = c;
  be:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <uart_getchar>:

int uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
  ca:	e0 ec       	ldi	r30, 0xC0	; 192
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	80 81       	ld	r24, Z
  d0:	88 23       	and	r24, r24
  d2:	ec f7       	brge	.-6      	; 0xce <uart_getchar+0x4>
	return UDR0;
  d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	08 95       	ret

000000dc <uart_init>:

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
  dc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
  e0:	87 e6       	ldi	r24, 0x67	; 103
  e2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
  e6:	e0 ec       	ldi	r30, 0xC0	; 192
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	8d 7f       	andi	r24, 0xFD	; 253
  ee:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
  f6:	88 e1       	ldi	r24, 0x18	; 24
  f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    // Redirect stdin and stdout so functions like printf and getchar work.
	stdout = &uart_output;
  fc:	e3 e5       	ldi	r30, 0x53	; 83
  fe:	f1 e0       	ldi	r31, 0x01	; 1
 100:	8e e0       	ldi	r24, 0x0E	; 14
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	93 83       	std	Z+3, r25	; 0x03
 106:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	91 83       	std	Z+1, r25	; 0x01
 10e:	80 83       	st	Z, r24
 110:	08 95       	ret

00000112 <timer1_init>:
volatile bool edges_detected = 0;
int num_overflows = 0;

void timer1_init()
{
	TCCR1B |= (1 << CS10);      // Enable the timer with no prescaling
 112:	e1 e8       	ldi	r30, 0x81	; 129
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	81 60       	ori	r24, 0x01	; 1
 11a:	80 83       	st	Z, r24
	
	TCNT1 = 0;	// Initialize the timer count value to 0
 11c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 120:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	TCCR1A |= (1 << COM1A0);	// COmpare output mode - Toggle OC1A on Compare Match
 124:	e0 e8       	ldi	r30, 0x80	; 128
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	80 64       	ori	r24, 0x40	; 64
 12c:	80 83       	st	Z, r24
	
	TIMSK1 = (1 << OCIE1A);		// Enable output compare A match interrupt enable
 12e:	82 e0       	ldi	r24, 0x02	; 2
 130:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	
	OCR1A = 80;					// Initialize the output compare value
 134:	80 e5       	ldi	r24, 0x50	; 80
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 13c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>

	sei();						// Enable global interrupts
 140:	78 94       	sei
 142:	08 95       	ret

00000144 <__vector_11>:
}

ISR(TIMER1_COMPA_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	ef 93       	push	r30
 156:	ff 93       	push	r31
	TCNT1 = 0;		// Initialize the timer count value to 0
 158:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 15c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>

	//TCCR1A &= ~(1 << COM1A0);	// Disable the output compare on timer1
	
	TIMSK1 &= ~(1 << OCIE1A);	// Disable the output compare match interrupt
 160:	ef e6       	ldi	r30, 0x6F	; 111
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	8d 7f       	andi	r24, 0xFD	; 253
 168:	80 83       	st	Z, r24
	
	TCCR1B |= (1 << ICES1);	// Enable the input capture trigger on rising edge
 16a:	a1 e8       	ldi	r26, 0x81	; 129
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	8c 91       	ld	r24, X
 170:	80 64       	ori	r24, 0x40	; 64
 172:	8c 93       	st	X, r24
	
	TIMSK1 = (1 << ICIE1);	// Enable the input capture interrupt
 174:	80 e2       	ldi	r24, 0x20	; 32
 176:	80 83       	st	Z, r24
	
	TIMSK1 |= (1 < TOIE1);	// Enable the overflow interrupt
 178:	80 81       	ld	r24, Z
 17a:	80 83       	st	Z, r24
	
	sei();						// Enable global interrupts
 17c:	78 94       	sei
}
 17e:	ff 91       	pop	r31
 180:	ef 91       	pop	r30
 182:	bf 91       	pop	r27
 184:	af 91       	pop	r26
 186:	8f 91       	pop	r24
 188:	0f 90       	pop	r0
 18a:	0f be       	out	0x3f, r0	; 63
 18c:	0f 90       	pop	r0
 18e:	1f 90       	pop	r1
 190:	18 95       	reti

00000192 <__vector_14>:

ISR(TIMER0_COMPA_vect)
{
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
	
}
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <__vector_13>:

ISR(TIMER1_OVF_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	8f 93       	push	r24
 1b2:	9f 93       	push	r25
	num_overflows++;
 1b4:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__data_end>
 1b8:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__data_end+0x1>
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <__data_end+0x1>
 1c2:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <__data_end>
}
 1c6:	9f 91       	pop	r25
 1c8:	8f 91       	pop	r24
 1ca:	0f 90       	pop	r0
 1cc:	0f be       	out	0x3f, r0	; 63
 1ce:	0f 90       	pop	r0
 1d0:	1f 90       	pop	r1
 1d2:	18 95       	reti

000001d4 <__vector_10>:

ISR(TIMER1_CAPT_vect)
{
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	// Check if trigger is set on rising edge
	if (TCCR1B & (1 << ICES1))
 1ea:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1ee:	86 ff       	sbrs	r24, 6
 1f0:	14 c0       	rjmp	.+40     	; 0x21a <__vector_10+0x46>
	{
		rising_edge_time = ICR1;	// Get the time at which rising edge is received
 1f2:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 1f6:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 1fa:	a0 e0       	ldi	r26, 0x00	; 0
 1fc:	b0 e0       	ldi	r27, 0x00	; 0
 1fe:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <rising_edge_time>
 202:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <rising_edge_time+0x1>
 206:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <rising_edge_time+0x2>
 20a:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <rising_edge_time+0x3>
		TCCR1B &= ~(1 << ICES1);		// Enable the input capture trigger on falling edge
 20e:	e1 e8       	ldi	r30, 0x81	; 129
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	80 81       	ld	r24, Z
 214:	8f 7b       	andi	r24, 0xBF	; 191
 216:	80 83       	st	Z, r24
 218:	16 c0       	rjmp	.+44     	; 0x246 <__vector_10+0x72>
	}
	else
	{
		falling_edge_time = ICR1;	// Get the time at which falling edge is received
 21a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
 21e:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 222:	a0 e0       	ldi	r26, 0x00	; 0
 224:	b0 e0       	ldi	r27, 0x00	; 0
 226:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <falling_edge_time>
 22a:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <falling_edge_time+0x1>
 22e:	a0 93 51 01 	sts	0x0151, r26	; 0x800151 <falling_edge_time+0x2>
 232:	b0 93 52 01 	sts	0x0152, r27	; 0x800152 <falling_edge_time+0x3>
		TCCR1B |= (1 << ICES1);		// Enable the input capture trigger on rising edge
 236:	e1 e8       	ldi	r30, 0x81	; 129
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	80 81       	ld	r24, Z
 23c:	80 64       	ori	r24, 0x40	; 64
 23e:	80 83       	st	Z, r24
		edges_detected = 1;
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <edges_detected>
	}
}
 246:	ff 91       	pop	r31
 248:	ef 91       	pop	r30
 24a:	bf 91       	pop	r27
 24c:	af 91       	pop	r26
 24e:	9f 91       	pop	r25
 250:	8f 91       	pop	r24
 252:	0f 90       	pop	r0
 254:	0f be       	out	0x3f, r0	; 63
 256:	0f 90       	pop	r0
 258:	1f 90       	pop	r1
 25a:	18 95       	reti

0000025c <timer0_init>:

// Initialize the timer and interrupts
void timer0_init()
{
	TCNT0 = 0;	// Initialize the timer count value to 0
 25c:	16 bc       	out	0x26, r1	; 38
	
	TCCR0A |= (1 << COM0A0);	// Sets the toggle OC0A on Compare Match mode
 25e:	84 b5       	in	r24, 0x24	; 36
 260:	80 64       	ori	r24, 0x40	; 64
 262:	84 bd       	out	0x24, r24	; 36
	
	TCCR0A |= (1 << WGM01);		// Set the mode of operation of timer to CTC
 264:	84 b5       	in	r24, 0x24	; 36
 266:	82 60       	ori	r24, 0x02	; 2
 268:	84 bd       	out	0x24, r24	; 36
	
	OCR0A = (int)(MIN_BUZZER_CYCLE_COUNT / 2);					// Initialize the output compare value
 26a:	8b e3       	ldi	r24, 0x3B	; 59
 26c:	87 bd       	out	0x27, r24	; 39
	
	TIMSK0 = (1 << OCIE0A);		// Enable output compare A match interrupt enable
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	
	TCCR0B |= (1 << CS00) | (1 << CS01);      // Enable the timer with prescaler(64) specification
 274:	85 b5       	in	r24, 0x25	; 37
 276:	83 60       	ori	r24, 0x03	; 3
 278:	85 bd       	out	0x25, r24	; 37
 27a:	08 95       	ret

0000027c <get_cycle_count>:
	//sei();						// Enable global interrupts
}

int get_cycle_count(int pulse_width)
{
	if (pulse_width < 150)
 27c:	86 39       	cpi	r24, 0x96	; 150
 27e:	91 05       	cpc	r25, r1
 280:	d4 f0       	brlt	.+52     	; 0x2b6 <get_cycle_count+0x3a>
	return 119;
	else if (pulse_width < 444)
 282:	8c 3b       	cpi	r24, 0xBC	; 188
 284:	21 e0       	ldi	r18, 0x01	; 1
 286:	92 07       	cpc	r25, r18
 288:	cc f0       	brlt	.+50     	; 0x2bc <get_cycle_count+0x40>
	return 127;
	else if (pulse_width < 738)
 28a:	82 3e       	cpi	r24, 0xE2	; 226
 28c:	22 e0       	ldi	r18, 0x02	; 2
 28e:	92 07       	cpc	r25, r18
 290:	c4 f0       	brlt	.+48     	; 0x2c2 <get_cycle_count+0x46>
	return 142;
	else if (pulse_width < 1032)
 292:	88 30       	cpi	r24, 0x08	; 8
 294:	24 e0       	ldi	r18, 0x04	; 4
 296:	92 07       	cpc	r25, r18
 298:	bc f0       	brlt	.+46     	; 0x2c8 <get_cycle_count+0x4c>
	return 159;
	else if (pulse_width < 1326)
 29a:	8e 32       	cpi	r24, 0x2E	; 46
 29c:	25 e0       	ldi	r18, 0x05	; 5
 29e:	92 07       	cpc	r25, r18
 2a0:	b4 f0       	brlt	.+44     	; 0x2ce <get_cycle_count+0x52>
	return 179;
	else if (pulse_width < 1620)
 2a2:	84 35       	cpi	r24, 0x54	; 84
 2a4:	26 e0       	ldi	r18, 0x06	; 6
 2a6:	92 07       	cpc	r25, r18
 2a8:	ac f0       	brlt	.+42     	; 0x2d4 <get_cycle_count+0x58>
	return 190;
	else if (pulse_width < 1914)
 2aa:	8a 37       	cpi	r24, 0x7A	; 122
 2ac:	97 40       	sbci	r25, 0x07	; 7
 2ae:	ac f0       	brlt	.+42     	; 0x2da <get_cycle_count+0x5e>
	return 213;
	else
	return 239;
 2b0:	8f ee       	ldi	r24, 0xEF	; 239
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	08 95       	ret
}

int get_cycle_count(int pulse_width)
{
	if (pulse_width < 150)
	return 119;
 2b6:	87 e7       	ldi	r24, 0x77	; 119
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	08 95       	ret
	else if (pulse_width < 444)
	return 127;
 2bc:	8f e7       	ldi	r24, 0x7F	; 127
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	08 95       	ret
	else if (pulse_width < 738)
	return 142;
 2c2:	8e e8       	ldi	r24, 0x8E	; 142
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	08 95       	ret
	else if (pulse_width < 1032)
	return 159;
 2c8:	8f e9       	ldi	r24, 0x9F	; 159
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	08 95       	ret
	else if (pulse_width < 1326)
	return 179;
 2ce:	83 eb       	ldi	r24, 0xB3	; 179
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	08 95       	ret
	else if (pulse_width < 1620)
	return 190;
 2d4:	8e eb       	ldi	r24, 0xBE	; 190
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	08 95       	ret
	else if (pulse_width < 1914)
	return 213;
 2da:	85 ed       	ldi	r24, 0xD5	; 213
 2dc:	90 e0       	ldi	r25, 0x00	; 0
	else
	return 239;
}
 2de:	08 95       	ret

000002e0 <ReadADC>:

uint16_t ReadADC(uint8_t ADCchannel)
{
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
 2e0:	ec e7       	ldi	r30, 0x7C	; 124
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	90 81       	ld	r25, Z
 2e6:	90 7f       	andi	r25, 0xF0	; 240
 2e8:	8f 70       	andi	r24, 0x0F	; 15
 2ea:	89 2b       	or	r24, r25
 2ec:	80 83       	st	Z, r24
	//single conversion mode
	ADCSRA |= (1<<ADSC);
 2ee:	ea e7       	ldi	r30, 0x7A	; 122
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	80 64       	ori	r24, 0x40	; 64
 2f6:	80 83       	st	Z, r24
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
 2f8:	80 81       	ld	r24, Z
 2fa:	86 fd       	sbrc	r24, 6
 2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <ReadADC+0x18>
	return ADC;
 2fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 302:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
 306:	08 95       	ret

00000308 <adc_init>:
		}
	}
}
void adc_init()
{
	ADMUX |= (1 << REFS0);   //set AVcc as voltage reference
 308:	ec e7       	ldi	r30, 0x7C	; 124
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	80 81       	ld	r24, Z
 30e:	80 64       	ori	r24, 0x40	; 64
 310:	80 83       	st	Z, r24
	ADCSRA |= 0x07;  //prescaler is 128 for '111'
 312:	ea e7       	ldi	r30, 0x7A	; 122
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	87 60       	ori	r24, 0x07	; 7
 31a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);   //turn ADC on
 31c:	80 81       	ld	r24, Z
 31e:	80 68       	ori	r24, 0x80	; 128
 320:	80 83       	st	Z, r24
 322:	08 95       	ret

00000324 <main>:
	while( ADCSRA & (1<<ADSC) );
	return ADC;
}

int main(void)
{
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	c1 58       	subi	r28, 0x81	; 129
 32e:	d1 09       	sbc	r29, r1
 330:	0f b6       	in	r0, 0x3f	; 63
 332:	f8 94       	cli
 334:	de bf       	out	0x3e, r29	; 62
 336:	0f be       	out	0x3f, r0	; 63
 338:	cd bf       	out	0x3d, r28	; 61
	uart_init();
 33a:	0e 94 6e 00 	call	0xdc	; 0xdc <uart_init>

	ADMUX |= 0x00;   //set AD0 as input
 33e:	ec e7       	ldi	r30, 0x7C	; 124
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	80 83       	st	Z, r24
	DDRB = 0x1c;   //set PB234 to output
 346:	8c e1       	ldi	r24, 0x1C	; 28
 348:	84 b9       	out	0x04, r24	; 4
	
	uint16_t adc_out;
	
	adc_init();
 34a:	0e 94 84 01 	call	0x308	; 0x308 <adc_init>
	
	//printf("Initializing system\n");
	
	DDRB = 0x02;		// Set PB1 to be output pin and PB0 as input pin
 34e:	82 e0       	ldi	r24, 0x02	; 2
 350:	84 b9       	out	0x04, r24	; 4
	DDRD = 0x40;		// For buzzer
 352:	90 e4       	ldi	r25, 0x40	; 64
 354:	9a b9       	out	0x0a, r25	; 10
	
	PORTB = (1 << 1);	// Set output pin to high
 356:	85 b9       	out	0x05, r24	; 5
	
	// Initialize the timer
	timer0_init();
 358:	0e 94 2e 01 	call	0x25c	; 0x25c <timer0_init>
	timer1_init();
 35c:	0e 94 89 00 	call	0x112	; 0x112 <timer1_init>
			}
			pulse_width = num_clock_ticks * CLOCK_TIME_PERIOD_US;
			
			// Print the width on terminal
			char result[64];
			snprintf(result, 64, "Pulse width is %ld\n", pulse_width);
 360:	0f 2e       	mov	r0, r31
 362:	fc e1       	ldi	r31, 0x1C	; 28
 364:	8f 2e       	mov	r8, r31
 366:	f1 e0       	ldi	r31, 0x01	; 1
 368:	9f 2e       	mov	r9, r31
 36a:	f0 2d       	mov	r31, r0
 36c:	68 94       	set
 36e:	33 24       	eor	r3, r3
 370:	36 f8       	bld	r3, 6
 372:	8e 01       	movw	r16, r28
 374:	0f 5b       	subi	r16, 0xBF	; 191
 376:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// Update the OCR0A value depending on pulse width
			
			OCR0A = get_cycle_count(pulse_width);
			
			printf("%d \n", OCR0A);
 378:	0f 2e       	mov	r0, r31
 37a:	f0 e3       	ldi	r31, 0x30	; 48
 37c:	af 2e       	mov	r10, r31
 37e:	f1 e0       	ldi	r31, 0x01	; 1
 380:	bf 2e       	mov	r11, r31
 382:	f0 2d       	mov	r31, r0
				{
					PORTB = 0x1c;   //set PB[4:2] to '111'
				}
				
				char result1[64];
				snprintf(result1, 64, "ADC output is %d\n", adc_out);
 384:	0f 2e       	mov	r0, r31
 386:	f5 e3       	ldi	r31, 0x35	; 53
 388:	cf 2e       	mov	r12, r31
 38a:	f1 e0       	ldi	r31, 0x01	; 1
 38c:	df 2e       	mov	r13, r31
 38e:	f0 2d       	mov	r31, r0
 390:	9e 01       	movw	r18, r28
 392:	2f 5f       	subi	r18, 0xFF	; 255
 394:	3f 4f       	sbci	r19, 0xFF	; 255
 396:	79 01       	movw	r14, r18
	timer1_init();
	
	while(1)
	{
		//printf("edges\n");
		if (edges_detected)
 398:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <edges_detected>
 39c:	88 23       	and	r24, r24
 39e:	e1 f3       	breq	.-8      	; 0x398 <main+0x74>
		{
			long int pulse_width, num_clock_ticks;
			
			// Get the pulse width
			if (num_overflows == 0)
 3a0:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <__data_end>
 3a4:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <__data_end+0x1>
 3a8:	10 97       	sbiw	r26, 0x00	; 0
 3aa:	b9 f4       	brne	.+46     	; 0x3da <main+0xb6>
			{
				num_clock_ticks = falling_edge_time - rising_edge_time;
 3ac:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <falling_edge_time>
 3b0:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <falling_edge_time+0x1>
 3b4:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <falling_edge_time+0x2>
 3b8:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <falling_edge_time+0x3>
 3bc:	40 90 4b 01 	lds	r4, 0x014B	; 0x80014b <rising_edge_time>
 3c0:	50 90 4c 01 	lds	r5, 0x014C	; 0x80014c <rising_edge_time+0x1>
 3c4:	60 90 4d 01 	lds	r6, 0x014D	; 0x80014d <rising_edge_time+0x2>
 3c8:	70 90 4e 01 	lds	r7, 0x014E	; 0x80014e <rising_edge_time+0x3>
 3cc:	bc 01       	movw	r22, r24
 3ce:	cd 01       	movw	r24, r26
 3d0:	64 19       	sub	r22, r4
 3d2:	75 09       	sbc	r23, r5
 3d4:	86 09       	sbc	r24, r6
 3d6:	97 09       	sbc	r25, r7
 3d8:	2b c0       	rjmp	.+86     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
			}
			else
			{
				num_clock_ticks = (NUM_TOTAL_TICKS - rising_edge_time) + (num_overflows * NUM_TOTAL_TICKS) + falling_edge_time;
 3da:	40 91 4b 01 	lds	r20, 0x014B	; 0x80014b <rising_edge_time>
 3de:	50 91 4c 01 	lds	r21, 0x014C	; 0x80014c <rising_edge_time+0x1>
 3e2:	60 91 4d 01 	lds	r22, 0x014D	; 0x80014d <rising_edge_time+0x2>
 3e6:	70 91 4e 01 	lds	r23, 0x014E	; 0x80014e <rising_edge_time+0x3>
 3ea:	44 24       	eor	r4, r4
 3ec:	4a 94       	dec	r4
 3ee:	54 2c       	mov	r5, r4
 3f0:	61 2c       	mov	r6, r1
 3f2:	71 2c       	mov	r7, r1
 3f4:	44 1a       	sub	r4, r20
 3f6:	55 0a       	sbc	r5, r21
 3f8:	66 0a       	sbc	r6, r22
 3fa:	77 0a       	sbc	r7, r23
 3fc:	2f ef       	ldi	r18, 0xFF	; 255
 3fe:	3f ef       	ldi	r19, 0xFF	; 255
 400:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__usmulhisi3>
 404:	ab 01       	movw	r20, r22
 406:	bc 01       	movw	r22, r24
 408:	44 0d       	add	r20, r4
 40a:	55 1d       	adc	r21, r5
 40c:	66 1d       	adc	r22, r6
 40e:	77 1d       	adc	r23, r7
 410:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <falling_edge_time>
 414:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <falling_edge_time+0x1>
 418:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <falling_edge_time+0x2>
 41c:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <falling_edge_time+0x3>
 420:	2a 01       	movw	r4, r20
 422:	3b 01       	movw	r6, r22
 424:	48 0e       	add	r4, r24
 426:	59 1e       	adc	r5, r25
 428:	6a 1e       	adc	r6, r26
 42a:	7b 1e       	adc	r7, r27
 42c:	c3 01       	movw	r24, r6
 42e:	b2 01       	movw	r22, r4
			}
			pulse_width = num_clock_ticks * CLOCK_TIME_PERIOD_US;
 430:	0e 94 da 02 	call	0x5b4	; 0x5b4 <__floatsisf>
 434:	20 e0       	ldi	r18, 0x00	; 0
 436:	30 e0       	ldi	r19, 0x00	; 0
 438:	40 e8       	ldi	r20, 0x80	; 128
 43a:	5d e3       	ldi	r21, 0x3D	; 61
 43c:	0e 94 3e 03 	call	0x67c	; 0x67c <__mulsf3>
 440:	0e 94 a2 02 	call	0x544	; 0x544 <__fixsfsi>
 444:	26 2e       	mov	r2, r22
 446:	cf 57       	subi	r28, 0x7F	; 127
 448:	df 4f       	sbci	r29, 0xFF	; 255
 44a:	78 83       	st	Y, r23
 44c:	c1 58       	subi	r28, 0x81	; 129
 44e:	d0 40       	sbci	r29, 0x00	; 0
			
			// Print the width on terminal
			char result[64];
			snprintf(result, 64, "Pulse width is %ld\n", pulse_width);
 450:	9f 93       	push	r25
 452:	8f 93       	push	r24
 454:	cf 57       	subi	r28, 0x7F	; 127
 456:	df 4f       	sbci	r29, 0xFF	; 255
 458:	58 80       	ld	r5, Y
 45a:	c1 58       	subi	r28, 0x81	; 129
 45c:	d0 40       	sbci	r29, 0x00	; 0
 45e:	5f 92       	push	r5
 460:	6f 93       	push	r22
 462:	9f 92       	push	r9
 464:	8f 92       	push	r8
 466:	1f 92       	push	r1
 468:	3f 92       	push	r3
 46a:	1f 93       	push	r17
 46c:	0f 93       	push	r16
 46e:	0e 94 2f 04 	call	0x85e	; 0x85e <snprintf>
			puts(result);
 472:	c8 01       	movw	r24, r16
 474:	0e 94 ff 03 	call	0x7fe	; 0x7fe <puts>
			
			// Update the OCR0A value depending on pulse width
			
			OCR0A = get_cycle_count(pulse_width);
 478:	82 2d       	mov	r24, r2
 47a:	cf 57       	subi	r28, 0x7F	; 127
 47c:	df 4f       	sbci	r29, 0xFF	; 255
 47e:	98 81       	ld	r25, Y
 480:	c1 58       	subi	r28, 0x81	; 129
 482:	d0 40       	sbci	r29, 0x00	; 0
 484:	0e 94 3e 01 	call	0x27c	; 0x27c <get_cycle_count>
 488:	87 bd       	out	0x27, r24	; 39
			
			printf("%d \n", OCR0A);
 48a:	87 b5       	in	r24, 0x27	; 39
 48c:	1f 92       	push	r1
 48e:	8f 93       	push	r24
 490:	bf 92       	push	r11
 492:	af 92       	push	r10
 494:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <printf>
			
			num_overflows = 0;
 498:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <__data_end+0x1>
 49c:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <__data_end>
			edges_detected = 0;
 4a0:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <edges_detected>
			
				adc_out = ReadADC(0);
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <ReadADC>
				
				if (adc_out <= 118)
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	f8 94       	cli
 4ae:	de bf       	out	0x3e, r29	; 62
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	cd bf       	out	0x3d, r28	; 61
 4b4:	87 37       	cpi	r24, 0x77	; 119
 4b6:	91 05       	cpc	r25, r1
 4b8:	10 f4       	brcc	.+4      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
				{
					PORTB = 0x00;   //set PB[4:2] to '000'
 4ba:	15 b8       	out	0x05, r1	; 5
 4bc:	2f c0       	rjmp	.+94     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
				}
				else if (adc_out <= 301)
 4be:	8e 32       	cpi	r24, 0x2E	; 46
 4c0:	31 e0       	ldi	r19, 0x01	; 1
 4c2:	93 07       	cpc	r25, r19
 4c4:	18 f4       	brcc	.+6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
				{
					PORTB = 0x04;   //set PB[4:2] to '001'
 4c6:	24 e0       	ldi	r18, 0x04	; 4
 4c8:	25 b9       	out	0x05, r18	; 5
 4ca:	28 c0       	rjmp	.+80     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
				}
				else if (adc_out <= 420)
 4cc:	85 3a       	cpi	r24, 0xA5	; 165
 4ce:	21 e0       	ldi	r18, 0x01	; 1
 4d0:	92 07       	cpc	r25, r18
 4d2:	18 f4       	brcc	.+6      	; 0x4da <__LOCK_REGION_LENGTH__+0xda>
				{
					PORTB = 0x08;   //set PB[4:2] to '010'
 4d4:	38 e0       	ldi	r19, 0x08	; 8
 4d6:	35 b9       	out	0x05, r19	; 5
 4d8:	21 c0       	rjmp	.+66     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
				}
				else if (adc_out <= 540)
 4da:	8d 31       	cpi	r24, 0x1D	; 29
 4dc:	22 e0       	ldi	r18, 0x02	; 2
 4de:	92 07       	cpc	r25, r18
 4e0:	18 f4       	brcc	.+6      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
				{
					PORTB = 0x0c;   //set PB[4:2] to '011'
 4e2:	3c e0       	ldi	r19, 0x0C	; 12
 4e4:	35 b9       	out	0x05, r19	; 5
 4e6:	1a c0       	rjmp	.+52     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
				}
				else if (adc_out <= 659)
 4e8:	84 39       	cpi	r24, 0x94	; 148
 4ea:	22 e0       	ldi	r18, 0x02	; 2
 4ec:	92 07       	cpc	r25, r18
 4ee:	18 f4       	brcc	.+6      	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
				{
					PORTB = 0x10;   //set PB[4:2] to '100'
 4f0:	30 e1       	ldi	r19, 0x10	; 16
 4f2:	35 b9       	out	0x05, r19	; 5
 4f4:	13 c0       	rjmp	.+38     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
				}
				else if (adc_out <= 778)
 4f6:	8b 30       	cpi	r24, 0x0B	; 11
 4f8:	23 e0       	ldi	r18, 0x03	; 3
 4fa:	92 07       	cpc	r25, r18
 4fc:	18 f4       	brcc	.+6      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
				{
					PORTB = 0x14;   //set PB[4:2] to '101'
 4fe:	34 e1       	ldi	r19, 0x14	; 20
 500:	35 b9       	out	0x05, r19	; 5
 502:	0c c0       	rjmp	.+24     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
				}
				else if (adc_out <= 898)
 504:	83 38       	cpi	r24, 0x83	; 131
 506:	23 e0       	ldi	r18, 0x03	; 3
 508:	92 07       	cpc	r25, r18
 50a:	18 f4       	brcc	.+6      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
				{
					PORTB = 0x18;   //set PB[4:2] to '110'
 50c:	38 e1       	ldi	r19, 0x18	; 24
 50e:	35 b9       	out	0x05, r19	; 5
 510:	05 c0       	rjmp	.+10     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
				}
				else
				{
					PORTB = 0x1c;   //set PB[4:2] to '111'
 512:	0f 2e       	mov	r0, r31
 514:	fc e1       	ldi	r31, 0x1C	; 28
 516:	4f 2e       	mov	r4, r31
 518:	f0 2d       	mov	r31, r0
 51a:	45 b8       	out	0x05, r4	; 5
				}
				
				char result1[64];
				snprintf(result1, 64, "ADC output is %d\n", adc_out);
 51c:	9f 93       	push	r25
 51e:	8f 93       	push	r24
 520:	df 92       	push	r13
 522:	cf 92       	push	r12
 524:	1f 92       	push	r1
 526:	3f 92       	push	r3
 528:	ff 92       	push	r15
 52a:	ef 92       	push	r14
 52c:	0e 94 2f 04 	call	0x85e	; 0x85e <snprintf>
				printf(result1);
 530:	ff 92       	push	r15
 532:	ef 92       	push	r14
 534:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <printf>
 538:	0f b6       	in	r0, 0x3f	; 63
 53a:	f8 94       	cli
 53c:	de bf       	out	0x3e, r29	; 62
 53e:	0f be       	out	0x3f, r0	; 63
 540:	cd bf       	out	0x3d, r28	; 61
 542:	2a cf       	rjmp	.-428    	; 0x398 <main+0x74>

00000544 <__fixsfsi>:
 544:	0e 94 a9 02 	call	0x552	; 0x552 <__fixunssfsi>
 548:	68 94       	set
 54a:	b1 11       	cpse	r27, r1
 54c:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_szero>
 550:	08 95       	ret

00000552 <__fixunssfsi>:
 552:	0e 94 1d 03 	call	0x63a	; 0x63a <__fp_splitA>
 556:	88 f0       	brcs	.+34     	; 0x57a <__fixunssfsi+0x28>
 558:	9f 57       	subi	r25, 0x7F	; 127
 55a:	98 f0       	brcs	.+38     	; 0x582 <__fixunssfsi+0x30>
 55c:	b9 2f       	mov	r27, r25
 55e:	99 27       	eor	r25, r25
 560:	b7 51       	subi	r27, 0x17	; 23
 562:	b0 f0       	brcs	.+44     	; 0x590 <__fixunssfsi+0x3e>
 564:	e1 f0       	breq	.+56     	; 0x59e <__fixunssfsi+0x4c>
 566:	66 0f       	add	r22, r22
 568:	77 1f       	adc	r23, r23
 56a:	88 1f       	adc	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	1a f0       	brmi	.+6      	; 0x576 <__fixunssfsi+0x24>
 570:	ba 95       	dec	r27
 572:	c9 f7       	brne	.-14     	; 0x566 <__fixunssfsi+0x14>
 574:	14 c0       	rjmp	.+40     	; 0x59e <__fixunssfsi+0x4c>
 576:	b1 30       	cpi	r27, 0x01	; 1
 578:	91 f0       	breq	.+36     	; 0x59e <__fixunssfsi+0x4c>
 57a:	0e 94 37 03 	call	0x66e	; 0x66e <__fp_zero>
 57e:	b1 e0       	ldi	r27, 0x01	; 1
 580:	08 95       	ret
 582:	0c 94 37 03 	jmp	0x66e	; 0x66e <__fp_zero>
 586:	67 2f       	mov	r22, r23
 588:	78 2f       	mov	r23, r24
 58a:	88 27       	eor	r24, r24
 58c:	b8 5f       	subi	r27, 0xF8	; 248
 58e:	39 f0       	breq	.+14     	; 0x59e <__fixunssfsi+0x4c>
 590:	b9 3f       	cpi	r27, 0xF9	; 249
 592:	cc f3       	brlt	.-14     	; 0x586 <__fixunssfsi+0x34>
 594:	86 95       	lsr	r24
 596:	77 95       	ror	r23
 598:	67 95       	ror	r22
 59a:	b3 95       	inc	r27
 59c:	d9 f7       	brne	.-10     	; 0x594 <__fixunssfsi+0x42>
 59e:	3e f4       	brtc	.+14     	; 0x5ae <__fixunssfsi+0x5c>
 5a0:	90 95       	com	r25
 5a2:	80 95       	com	r24
 5a4:	70 95       	com	r23
 5a6:	61 95       	neg	r22
 5a8:	7f 4f       	sbci	r23, 0xFF	; 255
 5aa:	8f 4f       	sbci	r24, 0xFF	; 255
 5ac:	9f 4f       	sbci	r25, 0xFF	; 255
 5ae:	08 95       	ret

000005b0 <__floatunsisf>:
 5b0:	e8 94       	clt
 5b2:	09 c0       	rjmp	.+18     	; 0x5c6 <__floatsisf+0x12>

000005b4 <__floatsisf>:
 5b4:	97 fb       	bst	r25, 7
 5b6:	3e f4       	brtc	.+14     	; 0x5c6 <__floatsisf+0x12>
 5b8:	90 95       	com	r25
 5ba:	80 95       	com	r24
 5bc:	70 95       	com	r23
 5be:	61 95       	neg	r22
 5c0:	7f 4f       	sbci	r23, 0xFF	; 255
 5c2:	8f 4f       	sbci	r24, 0xFF	; 255
 5c4:	9f 4f       	sbci	r25, 0xFF	; 255
 5c6:	99 23       	and	r25, r25
 5c8:	a9 f0       	breq	.+42     	; 0x5f4 <__floatsisf+0x40>
 5ca:	f9 2f       	mov	r31, r25
 5cc:	96 e9       	ldi	r25, 0x96	; 150
 5ce:	bb 27       	eor	r27, r27
 5d0:	93 95       	inc	r25
 5d2:	f6 95       	lsr	r31
 5d4:	87 95       	ror	r24
 5d6:	77 95       	ror	r23
 5d8:	67 95       	ror	r22
 5da:	b7 95       	ror	r27
 5dc:	f1 11       	cpse	r31, r1
 5de:	f8 cf       	rjmp	.-16     	; 0x5d0 <__floatsisf+0x1c>
 5e0:	fa f4       	brpl	.+62     	; 0x620 <__floatsisf+0x6c>
 5e2:	bb 0f       	add	r27, r27
 5e4:	11 f4       	brne	.+4      	; 0x5ea <__floatsisf+0x36>
 5e6:	60 ff       	sbrs	r22, 0
 5e8:	1b c0       	rjmp	.+54     	; 0x620 <__floatsisf+0x6c>
 5ea:	6f 5f       	subi	r22, 0xFF	; 255
 5ec:	7f 4f       	sbci	r23, 0xFF	; 255
 5ee:	8f 4f       	sbci	r24, 0xFF	; 255
 5f0:	9f 4f       	sbci	r25, 0xFF	; 255
 5f2:	16 c0       	rjmp	.+44     	; 0x620 <__floatsisf+0x6c>
 5f4:	88 23       	and	r24, r24
 5f6:	11 f0       	breq	.+4      	; 0x5fc <__floatsisf+0x48>
 5f8:	96 e9       	ldi	r25, 0x96	; 150
 5fa:	11 c0       	rjmp	.+34     	; 0x61e <__floatsisf+0x6a>
 5fc:	77 23       	and	r23, r23
 5fe:	21 f0       	breq	.+8      	; 0x608 <__floatsisf+0x54>
 600:	9e e8       	ldi	r25, 0x8E	; 142
 602:	87 2f       	mov	r24, r23
 604:	76 2f       	mov	r23, r22
 606:	05 c0       	rjmp	.+10     	; 0x612 <__floatsisf+0x5e>
 608:	66 23       	and	r22, r22
 60a:	71 f0       	breq	.+28     	; 0x628 <__floatsisf+0x74>
 60c:	96 e8       	ldi	r25, 0x86	; 134
 60e:	86 2f       	mov	r24, r22
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	60 e0       	ldi	r22, 0x00	; 0
 614:	2a f0       	brmi	.+10     	; 0x620 <__floatsisf+0x6c>
 616:	9a 95       	dec	r25
 618:	66 0f       	add	r22, r22
 61a:	77 1f       	adc	r23, r23
 61c:	88 1f       	adc	r24, r24
 61e:	da f7       	brpl	.-10     	; 0x616 <__floatsisf+0x62>
 620:	88 0f       	add	r24, r24
 622:	96 95       	lsr	r25
 624:	87 95       	ror	r24
 626:	97 f9       	bld	r25, 7
 628:	08 95       	ret

0000062a <__fp_split3>:
 62a:	57 fd       	sbrc	r21, 7
 62c:	90 58       	subi	r25, 0x80	; 128
 62e:	44 0f       	add	r20, r20
 630:	55 1f       	adc	r21, r21
 632:	59 f0       	breq	.+22     	; 0x64a <__fp_splitA+0x10>
 634:	5f 3f       	cpi	r21, 0xFF	; 255
 636:	71 f0       	breq	.+28     	; 0x654 <__fp_splitA+0x1a>
 638:	47 95       	ror	r20

0000063a <__fp_splitA>:
 63a:	88 0f       	add	r24, r24
 63c:	97 fb       	bst	r25, 7
 63e:	99 1f       	adc	r25, r25
 640:	61 f0       	breq	.+24     	; 0x65a <__fp_splitA+0x20>
 642:	9f 3f       	cpi	r25, 0xFF	; 255
 644:	79 f0       	breq	.+30     	; 0x664 <__fp_splitA+0x2a>
 646:	87 95       	ror	r24
 648:	08 95       	ret
 64a:	12 16       	cp	r1, r18
 64c:	13 06       	cpc	r1, r19
 64e:	14 06       	cpc	r1, r20
 650:	55 1f       	adc	r21, r21
 652:	f2 cf       	rjmp	.-28     	; 0x638 <__fp_split3+0xe>
 654:	46 95       	lsr	r20
 656:	f1 df       	rcall	.-30     	; 0x63a <__fp_splitA>
 658:	08 c0       	rjmp	.+16     	; 0x66a <__fp_splitA+0x30>
 65a:	16 16       	cp	r1, r22
 65c:	17 06       	cpc	r1, r23
 65e:	18 06       	cpc	r1, r24
 660:	99 1f       	adc	r25, r25
 662:	f1 cf       	rjmp	.-30     	; 0x646 <__fp_splitA+0xc>
 664:	86 95       	lsr	r24
 666:	71 05       	cpc	r23, r1
 668:	61 05       	cpc	r22, r1
 66a:	08 94       	sec
 66c:	08 95       	ret

0000066e <__fp_zero>:
 66e:	e8 94       	clt

00000670 <__fp_szero>:
 670:	bb 27       	eor	r27, r27
 672:	66 27       	eor	r22, r22
 674:	77 27       	eor	r23, r23
 676:	cb 01       	movw	r24, r22
 678:	97 f9       	bld	r25, 7
 67a:	08 95       	ret

0000067c <__mulsf3>:
 67c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__mulsf3x>
 680:	0c 94 c2 03 	jmp	0x784	; 0x784 <__fp_round>
 684:	0e 94 b4 03 	call	0x768	; 0x768 <__fp_pscA>
 688:	38 f0       	brcs	.+14     	; 0x698 <__mulsf3+0x1c>
 68a:	0e 94 bb 03 	call	0x776	; 0x776 <__fp_pscB>
 68e:	20 f0       	brcs	.+8      	; 0x698 <__mulsf3+0x1c>
 690:	95 23       	and	r25, r21
 692:	11 f0       	breq	.+4      	; 0x698 <__mulsf3+0x1c>
 694:	0c 94 ab 03 	jmp	0x756	; 0x756 <__fp_inf>
 698:	0c 94 b1 03 	jmp	0x762	; 0x762 <__fp_nan>
 69c:	11 24       	eor	r1, r1
 69e:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_szero>

000006a2 <__mulsf3x>:
 6a2:	0e 94 15 03 	call	0x62a	; 0x62a <__fp_split3>
 6a6:	70 f3       	brcs	.-36     	; 0x684 <__mulsf3+0x8>

000006a8 <__mulsf3_pse>:
 6a8:	95 9f       	mul	r25, r21
 6aa:	c1 f3       	breq	.-16     	; 0x69c <__mulsf3+0x20>
 6ac:	95 0f       	add	r25, r21
 6ae:	50 e0       	ldi	r21, 0x00	; 0
 6b0:	55 1f       	adc	r21, r21
 6b2:	62 9f       	mul	r22, r18
 6b4:	f0 01       	movw	r30, r0
 6b6:	72 9f       	mul	r23, r18
 6b8:	bb 27       	eor	r27, r27
 6ba:	f0 0d       	add	r31, r0
 6bc:	b1 1d       	adc	r27, r1
 6be:	63 9f       	mul	r22, r19
 6c0:	aa 27       	eor	r26, r26
 6c2:	f0 0d       	add	r31, r0
 6c4:	b1 1d       	adc	r27, r1
 6c6:	aa 1f       	adc	r26, r26
 6c8:	64 9f       	mul	r22, r20
 6ca:	66 27       	eor	r22, r22
 6cc:	b0 0d       	add	r27, r0
 6ce:	a1 1d       	adc	r26, r1
 6d0:	66 1f       	adc	r22, r22
 6d2:	82 9f       	mul	r24, r18
 6d4:	22 27       	eor	r18, r18
 6d6:	b0 0d       	add	r27, r0
 6d8:	a1 1d       	adc	r26, r1
 6da:	62 1f       	adc	r22, r18
 6dc:	73 9f       	mul	r23, r19
 6de:	b0 0d       	add	r27, r0
 6e0:	a1 1d       	adc	r26, r1
 6e2:	62 1f       	adc	r22, r18
 6e4:	83 9f       	mul	r24, r19
 6e6:	a0 0d       	add	r26, r0
 6e8:	61 1d       	adc	r22, r1
 6ea:	22 1f       	adc	r18, r18
 6ec:	74 9f       	mul	r23, r20
 6ee:	33 27       	eor	r19, r19
 6f0:	a0 0d       	add	r26, r0
 6f2:	61 1d       	adc	r22, r1
 6f4:	23 1f       	adc	r18, r19
 6f6:	84 9f       	mul	r24, r20
 6f8:	60 0d       	add	r22, r0
 6fa:	21 1d       	adc	r18, r1
 6fc:	82 2f       	mov	r24, r18
 6fe:	76 2f       	mov	r23, r22
 700:	6a 2f       	mov	r22, r26
 702:	11 24       	eor	r1, r1
 704:	9f 57       	subi	r25, 0x7F	; 127
 706:	50 40       	sbci	r21, 0x00	; 0
 708:	9a f0       	brmi	.+38     	; 0x730 <__mulsf3_pse+0x88>
 70a:	f1 f0       	breq	.+60     	; 0x748 <__mulsf3_pse+0xa0>
 70c:	88 23       	and	r24, r24
 70e:	4a f0       	brmi	.+18     	; 0x722 <__mulsf3_pse+0x7a>
 710:	ee 0f       	add	r30, r30
 712:	ff 1f       	adc	r31, r31
 714:	bb 1f       	adc	r27, r27
 716:	66 1f       	adc	r22, r22
 718:	77 1f       	adc	r23, r23
 71a:	88 1f       	adc	r24, r24
 71c:	91 50       	subi	r25, 0x01	; 1
 71e:	50 40       	sbci	r21, 0x00	; 0
 720:	a9 f7       	brne	.-22     	; 0x70c <__mulsf3_pse+0x64>
 722:	9e 3f       	cpi	r25, 0xFE	; 254
 724:	51 05       	cpc	r21, r1
 726:	80 f0       	brcs	.+32     	; 0x748 <__mulsf3_pse+0xa0>
 728:	0c 94 ab 03 	jmp	0x756	; 0x756 <__fp_inf>
 72c:	0c 94 38 03 	jmp	0x670	; 0x670 <__fp_szero>
 730:	5f 3f       	cpi	r21, 0xFF	; 255
 732:	e4 f3       	brlt	.-8      	; 0x72c <__mulsf3_pse+0x84>
 734:	98 3e       	cpi	r25, 0xE8	; 232
 736:	d4 f3       	brlt	.-12     	; 0x72c <__mulsf3_pse+0x84>
 738:	86 95       	lsr	r24
 73a:	77 95       	ror	r23
 73c:	67 95       	ror	r22
 73e:	b7 95       	ror	r27
 740:	f7 95       	ror	r31
 742:	e7 95       	ror	r30
 744:	9f 5f       	subi	r25, 0xFF	; 255
 746:	c1 f7       	brne	.-16     	; 0x738 <__mulsf3_pse+0x90>
 748:	fe 2b       	or	r31, r30
 74a:	88 0f       	add	r24, r24
 74c:	91 1d       	adc	r25, r1
 74e:	96 95       	lsr	r25
 750:	87 95       	ror	r24
 752:	97 f9       	bld	r25, 7
 754:	08 95       	ret

00000756 <__fp_inf>:
 756:	97 f9       	bld	r25, 7
 758:	9f 67       	ori	r25, 0x7F	; 127
 75a:	80 e8       	ldi	r24, 0x80	; 128
 75c:	70 e0       	ldi	r23, 0x00	; 0
 75e:	60 e0       	ldi	r22, 0x00	; 0
 760:	08 95       	ret

00000762 <__fp_nan>:
 762:	9f ef       	ldi	r25, 0xFF	; 255
 764:	80 ec       	ldi	r24, 0xC0	; 192
 766:	08 95       	ret

00000768 <__fp_pscA>:
 768:	00 24       	eor	r0, r0
 76a:	0a 94       	dec	r0
 76c:	16 16       	cp	r1, r22
 76e:	17 06       	cpc	r1, r23
 770:	18 06       	cpc	r1, r24
 772:	09 06       	cpc	r0, r25
 774:	08 95       	ret

00000776 <__fp_pscB>:
 776:	00 24       	eor	r0, r0
 778:	0a 94       	dec	r0
 77a:	12 16       	cp	r1, r18
 77c:	13 06       	cpc	r1, r19
 77e:	14 06       	cpc	r1, r20
 780:	05 06       	cpc	r0, r21
 782:	08 95       	ret

00000784 <__fp_round>:
 784:	09 2e       	mov	r0, r25
 786:	03 94       	inc	r0
 788:	00 0c       	add	r0, r0
 78a:	11 f4       	brne	.+4      	; 0x790 <__fp_round+0xc>
 78c:	88 23       	and	r24, r24
 78e:	52 f0       	brmi	.+20     	; 0x7a4 <__fp_round+0x20>
 790:	bb 0f       	add	r27, r27
 792:	40 f4       	brcc	.+16     	; 0x7a4 <__fp_round+0x20>
 794:	bf 2b       	or	r27, r31
 796:	11 f4       	brne	.+4      	; 0x79c <__fp_round+0x18>
 798:	60 ff       	sbrs	r22, 0
 79a:	04 c0       	rjmp	.+8      	; 0x7a4 <__fp_round+0x20>
 79c:	6f 5f       	subi	r22, 0xFF	; 255
 79e:	7f 4f       	sbci	r23, 0xFF	; 255
 7a0:	8f 4f       	sbci	r24, 0xFF	; 255
 7a2:	9f 4f       	sbci	r25, 0xFF	; 255
 7a4:	08 95       	ret

000007a6 <__usmulhisi3>:
 7a6:	0e 94 da 03 	call	0x7b4	; 0x7b4 <__umulhisi3>

000007aa <__usmulhisi3_tail>:
 7aa:	b7 ff       	sbrs	r27, 7
 7ac:	08 95       	ret
 7ae:	82 1b       	sub	r24, r18
 7b0:	93 0b       	sbc	r25, r19
 7b2:	08 95       	ret

000007b4 <__umulhisi3>:
 7b4:	a2 9f       	mul	r26, r18
 7b6:	b0 01       	movw	r22, r0
 7b8:	b3 9f       	mul	r27, r19
 7ba:	c0 01       	movw	r24, r0
 7bc:	a3 9f       	mul	r26, r19
 7be:	70 0d       	add	r23, r0
 7c0:	81 1d       	adc	r24, r1
 7c2:	11 24       	eor	r1, r1
 7c4:	91 1d       	adc	r25, r1
 7c6:	b2 9f       	mul	r27, r18
 7c8:	70 0d       	add	r23, r0
 7ca:	81 1d       	adc	r24, r1
 7cc:	11 24       	eor	r1, r1
 7ce:	91 1d       	adc	r25, r1
 7d0:	08 95       	ret

000007d2 <printf>:
 7d2:	a0 e0       	ldi	r26, 0x00	; 0
 7d4:	b0 e0       	ldi	r27, 0x00	; 0
 7d6:	ef ee       	ldi	r30, 0xEF	; 239
 7d8:	f3 e0       	ldi	r31, 0x03	; 3
 7da:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__prologue_saves__+0x20>
 7de:	ae 01       	movw	r20, r28
 7e0:	4b 5f       	subi	r20, 0xFB	; 251
 7e2:	5f 4f       	sbci	r21, 0xFF	; 255
 7e4:	fa 01       	movw	r30, r20
 7e6:	61 91       	ld	r22, Z+
 7e8:	71 91       	ld	r23, Z+
 7ea:	af 01       	movw	r20, r30
 7ec:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <__iob+0x2>
 7f0:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <__iob+0x3>
 7f4:	0e 94 5f 04 	call	0x8be	; 0x8be <vfprintf>
 7f8:	e2 e0       	ldi	r30, 0x02	; 2
 7fa:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__epilogue_restores__+0x20>

000007fe <puts>:
 7fe:	0f 93       	push	r16
 800:	1f 93       	push	r17
 802:	cf 93       	push	r28
 804:	df 93       	push	r29
 806:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <__iob+0x2>
 80a:	f0 91 56 01 	lds	r31, 0x0156	; 0x800156 <__iob+0x3>
 80e:	23 81       	ldd	r18, Z+3	; 0x03
 810:	21 ff       	sbrs	r18, 1
 812:	1b c0       	rjmp	.+54     	; 0x84a <puts+0x4c>
 814:	8c 01       	movw	r16, r24
 816:	d0 e0       	ldi	r29, 0x00	; 0
 818:	c0 e0       	ldi	r28, 0x00	; 0
 81a:	f8 01       	movw	r30, r16
 81c:	81 91       	ld	r24, Z+
 81e:	8f 01       	movw	r16, r30
 820:	60 91 55 01 	lds	r22, 0x0155	; 0x800155 <__iob+0x2>
 824:	70 91 56 01 	lds	r23, 0x0156	; 0x800156 <__iob+0x3>
 828:	db 01       	movw	r26, r22
 82a:	18 96       	adiw	r26, 0x08	; 8
 82c:	ed 91       	ld	r30, X+
 82e:	fc 91       	ld	r31, X
 830:	19 97       	sbiw	r26, 0x09	; 9
 832:	88 23       	and	r24, r24
 834:	31 f0       	breq	.+12     	; 0x842 <puts+0x44>
 836:	09 95       	icall
 838:	89 2b       	or	r24, r25
 83a:	79 f3       	breq	.-34     	; 0x81a <puts+0x1c>
 83c:	df ef       	ldi	r29, 0xFF	; 255
 83e:	cf ef       	ldi	r28, 0xFF	; 255
 840:	ec cf       	rjmp	.-40     	; 0x81a <puts+0x1c>
 842:	8a e0       	ldi	r24, 0x0A	; 10
 844:	09 95       	icall
 846:	89 2b       	or	r24, r25
 848:	19 f0       	breq	.+6      	; 0x850 <puts+0x52>
 84a:	8f ef       	ldi	r24, 0xFF	; 255
 84c:	9f ef       	ldi	r25, 0xFF	; 255
 84e:	02 c0       	rjmp	.+4      	; 0x854 <puts+0x56>
 850:	8d 2f       	mov	r24, r29
 852:	9c 2f       	mov	r25, r28
 854:	df 91       	pop	r29
 856:	cf 91       	pop	r28
 858:	1f 91       	pop	r17
 85a:	0f 91       	pop	r16
 85c:	08 95       	ret

0000085e <snprintf>:
 85e:	ae e0       	ldi	r26, 0x0E	; 14
 860:	b0 e0       	ldi	r27, 0x00	; 0
 862:	e5 e3       	ldi	r30, 0x35	; 53
 864:	f4 e0       	ldi	r31, 0x04	; 4
 866:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__prologue_saves__+0x1c>
 86a:	0d 89       	ldd	r16, Y+21	; 0x15
 86c:	1e 89       	ldd	r17, Y+22	; 0x16
 86e:	8f 89       	ldd	r24, Y+23	; 0x17
 870:	98 8d       	ldd	r25, Y+24	; 0x18
 872:	26 e0       	ldi	r18, 0x06	; 6
 874:	2c 83       	std	Y+4, r18	; 0x04
 876:	1a 83       	std	Y+2, r17	; 0x02
 878:	09 83       	std	Y+1, r16	; 0x01
 87a:	97 ff       	sbrs	r25, 7
 87c:	02 c0       	rjmp	.+4      	; 0x882 <snprintf+0x24>
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	90 e8       	ldi	r25, 0x80	; 128
 882:	01 97       	sbiw	r24, 0x01	; 1
 884:	9e 83       	std	Y+6, r25	; 0x06
 886:	8d 83       	std	Y+5, r24	; 0x05
 888:	ae 01       	movw	r20, r28
 88a:	45 5e       	subi	r20, 0xE5	; 229
 88c:	5f 4f       	sbci	r21, 0xFF	; 255
 88e:	69 8d       	ldd	r22, Y+25	; 0x19
 890:	7a 8d       	ldd	r23, Y+26	; 0x1a
 892:	ce 01       	movw	r24, r28
 894:	01 96       	adiw	r24, 0x01	; 1
 896:	0e 94 5f 04 	call	0x8be	; 0x8be <vfprintf>
 89a:	4d 81       	ldd	r20, Y+5	; 0x05
 89c:	5e 81       	ldd	r21, Y+6	; 0x06
 89e:	57 fd       	sbrc	r21, 7
 8a0:	0a c0       	rjmp	.+20     	; 0x8b6 <snprintf+0x58>
 8a2:	2f 81       	ldd	r18, Y+7	; 0x07
 8a4:	38 85       	ldd	r19, Y+8	; 0x08
 8a6:	42 17       	cp	r20, r18
 8a8:	53 07       	cpc	r21, r19
 8aa:	0c f4       	brge	.+2      	; 0x8ae <snprintf+0x50>
 8ac:	9a 01       	movw	r18, r20
 8ae:	f8 01       	movw	r30, r16
 8b0:	e2 0f       	add	r30, r18
 8b2:	f3 1f       	adc	r31, r19
 8b4:	10 82       	st	Z, r1
 8b6:	2e 96       	adiw	r28, 0x0e	; 14
 8b8:	e4 e0       	ldi	r30, 0x04	; 4
 8ba:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__epilogue_restores__+0x1c>

000008be <vfprintf>:
 8be:	ab e0       	ldi	r26, 0x0B	; 11
 8c0:	b0 e0       	ldi	r27, 0x00	; 0
 8c2:	e5 e6       	ldi	r30, 0x65	; 101
 8c4:	f4 e0       	ldi	r31, 0x04	; 4
 8c6:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__prologue_saves__>
 8ca:	6c 01       	movw	r12, r24
 8cc:	7b 01       	movw	r14, r22
 8ce:	8a 01       	movw	r16, r20
 8d0:	fc 01       	movw	r30, r24
 8d2:	17 82       	std	Z+7, r1	; 0x07
 8d4:	16 82       	std	Z+6, r1	; 0x06
 8d6:	83 81       	ldd	r24, Z+3	; 0x03
 8d8:	81 ff       	sbrs	r24, 1
 8da:	cc c1       	rjmp	.+920    	; 0xc74 <__stack+0x375>
 8dc:	ce 01       	movw	r24, r28
 8de:	01 96       	adiw	r24, 0x01	; 1
 8e0:	3c 01       	movw	r6, r24
 8e2:	f6 01       	movw	r30, r12
 8e4:	93 81       	ldd	r25, Z+3	; 0x03
 8e6:	f7 01       	movw	r30, r14
 8e8:	93 fd       	sbrc	r25, 3
 8ea:	85 91       	lpm	r24, Z+
 8ec:	93 ff       	sbrs	r25, 3
 8ee:	81 91       	ld	r24, Z+
 8f0:	7f 01       	movw	r14, r30
 8f2:	88 23       	and	r24, r24
 8f4:	09 f4       	brne	.+2      	; 0x8f8 <vfprintf+0x3a>
 8f6:	ba c1       	rjmp	.+884    	; 0xc6c <__stack+0x36d>
 8f8:	85 32       	cpi	r24, 0x25	; 37
 8fa:	39 f4       	brne	.+14     	; 0x90a <__stack+0xb>
 8fc:	93 fd       	sbrc	r25, 3
 8fe:	85 91       	lpm	r24, Z+
 900:	93 ff       	sbrs	r25, 3
 902:	81 91       	ld	r24, Z+
 904:	7f 01       	movw	r14, r30
 906:	85 32       	cpi	r24, 0x25	; 37
 908:	29 f4       	brne	.+10     	; 0x914 <__stack+0x15>
 90a:	b6 01       	movw	r22, r12
 90c:	90 e0       	ldi	r25, 0x00	; 0
 90e:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 912:	e7 cf       	rjmp	.-50     	; 0x8e2 <vfprintf+0x24>
 914:	91 2c       	mov	r9, r1
 916:	21 2c       	mov	r2, r1
 918:	31 2c       	mov	r3, r1
 91a:	ff e1       	ldi	r31, 0x1F	; 31
 91c:	f3 15       	cp	r31, r3
 91e:	d8 f0       	brcs	.+54     	; 0x956 <__stack+0x57>
 920:	8b 32       	cpi	r24, 0x2B	; 43
 922:	79 f0       	breq	.+30     	; 0x942 <__stack+0x43>
 924:	38 f4       	brcc	.+14     	; 0x934 <__stack+0x35>
 926:	80 32       	cpi	r24, 0x20	; 32
 928:	79 f0       	breq	.+30     	; 0x948 <__stack+0x49>
 92a:	83 32       	cpi	r24, 0x23	; 35
 92c:	a1 f4       	brne	.+40     	; 0x956 <__stack+0x57>
 92e:	23 2d       	mov	r18, r3
 930:	20 61       	ori	r18, 0x10	; 16
 932:	1d c0       	rjmp	.+58     	; 0x96e <__stack+0x6f>
 934:	8d 32       	cpi	r24, 0x2D	; 45
 936:	61 f0       	breq	.+24     	; 0x950 <__stack+0x51>
 938:	80 33       	cpi	r24, 0x30	; 48
 93a:	69 f4       	brne	.+26     	; 0x956 <__stack+0x57>
 93c:	23 2d       	mov	r18, r3
 93e:	21 60       	ori	r18, 0x01	; 1
 940:	16 c0       	rjmp	.+44     	; 0x96e <__stack+0x6f>
 942:	83 2d       	mov	r24, r3
 944:	82 60       	ori	r24, 0x02	; 2
 946:	38 2e       	mov	r3, r24
 948:	e3 2d       	mov	r30, r3
 94a:	e4 60       	ori	r30, 0x04	; 4
 94c:	3e 2e       	mov	r3, r30
 94e:	2a c0       	rjmp	.+84     	; 0x9a4 <__stack+0xa5>
 950:	f3 2d       	mov	r31, r3
 952:	f8 60       	ori	r31, 0x08	; 8
 954:	1d c0       	rjmp	.+58     	; 0x990 <__stack+0x91>
 956:	37 fc       	sbrc	r3, 7
 958:	2d c0       	rjmp	.+90     	; 0x9b4 <__stack+0xb5>
 95a:	20 ed       	ldi	r18, 0xD0	; 208
 95c:	28 0f       	add	r18, r24
 95e:	2a 30       	cpi	r18, 0x0A	; 10
 960:	40 f0       	brcs	.+16     	; 0x972 <__stack+0x73>
 962:	8e 32       	cpi	r24, 0x2E	; 46
 964:	b9 f4       	brne	.+46     	; 0x994 <__stack+0x95>
 966:	36 fc       	sbrc	r3, 6
 968:	81 c1       	rjmp	.+770    	; 0xc6c <__stack+0x36d>
 96a:	23 2d       	mov	r18, r3
 96c:	20 64       	ori	r18, 0x40	; 64
 96e:	32 2e       	mov	r3, r18
 970:	19 c0       	rjmp	.+50     	; 0x9a4 <__stack+0xa5>
 972:	36 fe       	sbrs	r3, 6
 974:	06 c0       	rjmp	.+12     	; 0x982 <__stack+0x83>
 976:	8a e0       	ldi	r24, 0x0A	; 10
 978:	98 9e       	mul	r9, r24
 97a:	20 0d       	add	r18, r0
 97c:	11 24       	eor	r1, r1
 97e:	92 2e       	mov	r9, r18
 980:	11 c0       	rjmp	.+34     	; 0x9a4 <__stack+0xa5>
 982:	ea e0       	ldi	r30, 0x0A	; 10
 984:	2e 9e       	mul	r2, r30
 986:	20 0d       	add	r18, r0
 988:	11 24       	eor	r1, r1
 98a:	22 2e       	mov	r2, r18
 98c:	f3 2d       	mov	r31, r3
 98e:	f0 62       	ori	r31, 0x20	; 32
 990:	3f 2e       	mov	r3, r31
 992:	08 c0       	rjmp	.+16     	; 0x9a4 <__stack+0xa5>
 994:	8c 36       	cpi	r24, 0x6C	; 108
 996:	21 f4       	brne	.+8      	; 0x9a0 <__stack+0xa1>
 998:	83 2d       	mov	r24, r3
 99a:	80 68       	ori	r24, 0x80	; 128
 99c:	38 2e       	mov	r3, r24
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <__stack+0xa5>
 9a0:	88 36       	cpi	r24, 0x68	; 104
 9a2:	41 f4       	brne	.+16     	; 0x9b4 <__stack+0xb5>
 9a4:	f7 01       	movw	r30, r14
 9a6:	93 fd       	sbrc	r25, 3
 9a8:	85 91       	lpm	r24, Z+
 9aa:	93 ff       	sbrs	r25, 3
 9ac:	81 91       	ld	r24, Z+
 9ae:	7f 01       	movw	r14, r30
 9b0:	81 11       	cpse	r24, r1
 9b2:	b3 cf       	rjmp	.-154    	; 0x91a <__stack+0x1b>
 9b4:	98 2f       	mov	r25, r24
 9b6:	9f 7d       	andi	r25, 0xDF	; 223
 9b8:	95 54       	subi	r25, 0x45	; 69
 9ba:	93 30       	cpi	r25, 0x03	; 3
 9bc:	28 f4       	brcc	.+10     	; 0x9c8 <__stack+0xc9>
 9be:	0c 5f       	subi	r16, 0xFC	; 252
 9c0:	1f 4f       	sbci	r17, 0xFF	; 255
 9c2:	9f e3       	ldi	r25, 0x3F	; 63
 9c4:	99 83       	std	Y+1, r25	; 0x01
 9c6:	0d c0       	rjmp	.+26     	; 0x9e2 <__stack+0xe3>
 9c8:	83 36       	cpi	r24, 0x63	; 99
 9ca:	31 f0       	breq	.+12     	; 0x9d8 <__stack+0xd9>
 9cc:	83 37       	cpi	r24, 0x73	; 115
 9ce:	71 f0       	breq	.+28     	; 0x9ec <__stack+0xed>
 9d0:	83 35       	cpi	r24, 0x53	; 83
 9d2:	09 f0       	breq	.+2      	; 0x9d6 <__stack+0xd7>
 9d4:	59 c0       	rjmp	.+178    	; 0xa88 <__stack+0x189>
 9d6:	21 c0       	rjmp	.+66     	; 0xa1a <__stack+0x11b>
 9d8:	f8 01       	movw	r30, r16
 9da:	80 81       	ld	r24, Z
 9dc:	89 83       	std	Y+1, r24	; 0x01
 9de:	0e 5f       	subi	r16, 0xFE	; 254
 9e0:	1f 4f       	sbci	r17, 0xFF	; 255
 9e2:	88 24       	eor	r8, r8
 9e4:	83 94       	inc	r8
 9e6:	91 2c       	mov	r9, r1
 9e8:	53 01       	movw	r10, r6
 9ea:	13 c0       	rjmp	.+38     	; 0xa12 <__stack+0x113>
 9ec:	28 01       	movw	r4, r16
 9ee:	f2 e0       	ldi	r31, 0x02	; 2
 9f0:	4f 0e       	add	r4, r31
 9f2:	51 1c       	adc	r5, r1
 9f4:	f8 01       	movw	r30, r16
 9f6:	a0 80       	ld	r10, Z
 9f8:	b1 80       	ldd	r11, Z+1	; 0x01
 9fa:	36 fe       	sbrs	r3, 6
 9fc:	03 c0       	rjmp	.+6      	; 0xa04 <__stack+0x105>
 9fe:	69 2d       	mov	r22, r9
 a00:	70 e0       	ldi	r23, 0x00	; 0
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <__stack+0x109>
 a04:	6f ef       	ldi	r22, 0xFF	; 255
 a06:	7f ef       	ldi	r23, 0xFF	; 255
 a08:	c5 01       	movw	r24, r10
 a0a:	0e 94 4b 06 	call	0xc96	; 0xc96 <strnlen>
 a0e:	4c 01       	movw	r8, r24
 a10:	82 01       	movw	r16, r4
 a12:	f3 2d       	mov	r31, r3
 a14:	ff 77       	andi	r31, 0x7F	; 127
 a16:	3f 2e       	mov	r3, r31
 a18:	16 c0       	rjmp	.+44     	; 0xa46 <__stack+0x147>
 a1a:	28 01       	movw	r4, r16
 a1c:	22 e0       	ldi	r18, 0x02	; 2
 a1e:	42 0e       	add	r4, r18
 a20:	51 1c       	adc	r5, r1
 a22:	f8 01       	movw	r30, r16
 a24:	a0 80       	ld	r10, Z
 a26:	b1 80       	ldd	r11, Z+1	; 0x01
 a28:	36 fe       	sbrs	r3, 6
 a2a:	03 c0       	rjmp	.+6      	; 0xa32 <__stack+0x133>
 a2c:	69 2d       	mov	r22, r9
 a2e:	70 e0       	ldi	r23, 0x00	; 0
 a30:	02 c0       	rjmp	.+4      	; 0xa36 <__stack+0x137>
 a32:	6f ef       	ldi	r22, 0xFF	; 255
 a34:	7f ef       	ldi	r23, 0xFF	; 255
 a36:	c5 01       	movw	r24, r10
 a38:	0e 94 40 06 	call	0xc80	; 0xc80 <strnlen_P>
 a3c:	4c 01       	movw	r8, r24
 a3e:	f3 2d       	mov	r31, r3
 a40:	f0 68       	ori	r31, 0x80	; 128
 a42:	3f 2e       	mov	r3, r31
 a44:	82 01       	movw	r16, r4
 a46:	33 fc       	sbrc	r3, 3
 a48:	1b c0       	rjmp	.+54     	; 0xa80 <__stack+0x181>
 a4a:	82 2d       	mov	r24, r2
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	88 16       	cp	r8, r24
 a50:	99 06       	cpc	r9, r25
 a52:	b0 f4       	brcc	.+44     	; 0xa80 <__stack+0x181>
 a54:	b6 01       	movw	r22, r12
 a56:	80 e2       	ldi	r24, 0x20	; 32
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 a5e:	2a 94       	dec	r2
 a60:	f4 cf       	rjmp	.-24     	; 0xa4a <__stack+0x14b>
 a62:	f5 01       	movw	r30, r10
 a64:	37 fc       	sbrc	r3, 7
 a66:	85 91       	lpm	r24, Z+
 a68:	37 fe       	sbrs	r3, 7
 a6a:	81 91       	ld	r24, Z+
 a6c:	5f 01       	movw	r10, r30
 a6e:	b6 01       	movw	r22, r12
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 a76:	21 10       	cpse	r2, r1
 a78:	2a 94       	dec	r2
 a7a:	21 e0       	ldi	r18, 0x01	; 1
 a7c:	82 1a       	sub	r8, r18
 a7e:	91 08       	sbc	r9, r1
 a80:	81 14       	cp	r8, r1
 a82:	91 04       	cpc	r9, r1
 a84:	71 f7       	brne	.-36     	; 0xa62 <__stack+0x163>
 a86:	e8 c0       	rjmp	.+464    	; 0xc58 <__stack+0x359>
 a88:	84 36       	cpi	r24, 0x64	; 100
 a8a:	11 f0       	breq	.+4      	; 0xa90 <__stack+0x191>
 a8c:	89 36       	cpi	r24, 0x69	; 105
 a8e:	41 f5       	brne	.+80     	; 0xae0 <__stack+0x1e1>
 a90:	f8 01       	movw	r30, r16
 a92:	37 fe       	sbrs	r3, 7
 a94:	07 c0       	rjmp	.+14     	; 0xaa4 <__stack+0x1a5>
 a96:	60 81       	ld	r22, Z
 a98:	71 81       	ldd	r23, Z+1	; 0x01
 a9a:	82 81       	ldd	r24, Z+2	; 0x02
 a9c:	93 81       	ldd	r25, Z+3	; 0x03
 a9e:	0c 5f       	subi	r16, 0xFC	; 252
 aa0:	1f 4f       	sbci	r17, 0xFF	; 255
 aa2:	08 c0       	rjmp	.+16     	; 0xab4 <__stack+0x1b5>
 aa4:	60 81       	ld	r22, Z
 aa6:	71 81       	ldd	r23, Z+1	; 0x01
 aa8:	07 2e       	mov	r0, r23
 aaa:	00 0c       	add	r0, r0
 aac:	88 0b       	sbc	r24, r24
 aae:	99 0b       	sbc	r25, r25
 ab0:	0e 5f       	subi	r16, 0xFE	; 254
 ab2:	1f 4f       	sbci	r17, 0xFF	; 255
 ab4:	f3 2d       	mov	r31, r3
 ab6:	ff 76       	andi	r31, 0x6F	; 111
 ab8:	3f 2e       	mov	r3, r31
 aba:	97 ff       	sbrs	r25, 7
 abc:	09 c0       	rjmp	.+18     	; 0xad0 <__stack+0x1d1>
 abe:	90 95       	com	r25
 ac0:	80 95       	com	r24
 ac2:	70 95       	com	r23
 ac4:	61 95       	neg	r22
 ac6:	7f 4f       	sbci	r23, 0xFF	; 255
 ac8:	8f 4f       	sbci	r24, 0xFF	; 255
 aca:	9f 4f       	sbci	r25, 0xFF	; 255
 acc:	f0 68       	ori	r31, 0x80	; 128
 ace:	3f 2e       	mov	r3, r31
 ad0:	2a e0       	ldi	r18, 0x0A	; 10
 ad2:	30 e0       	ldi	r19, 0x00	; 0
 ad4:	a3 01       	movw	r20, r6
 ad6:	0e 94 92 06 	call	0xd24	; 0xd24 <__ultoa_invert>
 ada:	88 2e       	mov	r8, r24
 adc:	86 18       	sub	r8, r6
 ade:	45 c0       	rjmp	.+138    	; 0xb6a <__stack+0x26b>
 ae0:	85 37       	cpi	r24, 0x75	; 117
 ae2:	31 f4       	brne	.+12     	; 0xaf0 <__stack+0x1f1>
 ae4:	23 2d       	mov	r18, r3
 ae6:	2f 7e       	andi	r18, 0xEF	; 239
 ae8:	b2 2e       	mov	r11, r18
 aea:	2a e0       	ldi	r18, 0x0A	; 10
 aec:	30 e0       	ldi	r19, 0x00	; 0
 aee:	25 c0       	rjmp	.+74     	; 0xb3a <__stack+0x23b>
 af0:	93 2d       	mov	r25, r3
 af2:	99 7f       	andi	r25, 0xF9	; 249
 af4:	b9 2e       	mov	r11, r25
 af6:	8f 36       	cpi	r24, 0x6F	; 111
 af8:	c1 f0       	breq	.+48     	; 0xb2a <__stack+0x22b>
 afa:	18 f4       	brcc	.+6      	; 0xb02 <__stack+0x203>
 afc:	88 35       	cpi	r24, 0x58	; 88
 afe:	79 f0       	breq	.+30     	; 0xb1e <__stack+0x21f>
 b00:	b5 c0       	rjmp	.+362    	; 0xc6c <__stack+0x36d>
 b02:	80 37       	cpi	r24, 0x70	; 112
 b04:	19 f0       	breq	.+6      	; 0xb0c <__stack+0x20d>
 b06:	88 37       	cpi	r24, 0x78	; 120
 b08:	21 f0       	breq	.+8      	; 0xb12 <__stack+0x213>
 b0a:	b0 c0       	rjmp	.+352    	; 0xc6c <__stack+0x36d>
 b0c:	e9 2f       	mov	r30, r25
 b0e:	e0 61       	ori	r30, 0x10	; 16
 b10:	be 2e       	mov	r11, r30
 b12:	b4 fe       	sbrs	r11, 4
 b14:	0d c0       	rjmp	.+26     	; 0xb30 <__stack+0x231>
 b16:	fb 2d       	mov	r31, r11
 b18:	f4 60       	ori	r31, 0x04	; 4
 b1a:	bf 2e       	mov	r11, r31
 b1c:	09 c0       	rjmp	.+18     	; 0xb30 <__stack+0x231>
 b1e:	34 fe       	sbrs	r3, 4
 b20:	0a c0       	rjmp	.+20     	; 0xb36 <__stack+0x237>
 b22:	29 2f       	mov	r18, r25
 b24:	26 60       	ori	r18, 0x06	; 6
 b26:	b2 2e       	mov	r11, r18
 b28:	06 c0       	rjmp	.+12     	; 0xb36 <__stack+0x237>
 b2a:	28 e0       	ldi	r18, 0x08	; 8
 b2c:	30 e0       	ldi	r19, 0x00	; 0
 b2e:	05 c0       	rjmp	.+10     	; 0xb3a <__stack+0x23b>
 b30:	20 e1       	ldi	r18, 0x10	; 16
 b32:	30 e0       	ldi	r19, 0x00	; 0
 b34:	02 c0       	rjmp	.+4      	; 0xb3a <__stack+0x23b>
 b36:	20 e1       	ldi	r18, 0x10	; 16
 b38:	32 e0       	ldi	r19, 0x02	; 2
 b3a:	f8 01       	movw	r30, r16
 b3c:	b7 fe       	sbrs	r11, 7
 b3e:	07 c0       	rjmp	.+14     	; 0xb4e <__stack+0x24f>
 b40:	60 81       	ld	r22, Z
 b42:	71 81       	ldd	r23, Z+1	; 0x01
 b44:	82 81       	ldd	r24, Z+2	; 0x02
 b46:	93 81       	ldd	r25, Z+3	; 0x03
 b48:	0c 5f       	subi	r16, 0xFC	; 252
 b4a:	1f 4f       	sbci	r17, 0xFF	; 255
 b4c:	06 c0       	rjmp	.+12     	; 0xb5a <__stack+0x25b>
 b4e:	60 81       	ld	r22, Z
 b50:	71 81       	ldd	r23, Z+1	; 0x01
 b52:	80 e0       	ldi	r24, 0x00	; 0
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	0e 5f       	subi	r16, 0xFE	; 254
 b58:	1f 4f       	sbci	r17, 0xFF	; 255
 b5a:	a3 01       	movw	r20, r6
 b5c:	0e 94 92 06 	call	0xd24	; 0xd24 <__ultoa_invert>
 b60:	88 2e       	mov	r8, r24
 b62:	86 18       	sub	r8, r6
 b64:	fb 2d       	mov	r31, r11
 b66:	ff 77       	andi	r31, 0x7F	; 127
 b68:	3f 2e       	mov	r3, r31
 b6a:	36 fe       	sbrs	r3, 6
 b6c:	0d c0       	rjmp	.+26     	; 0xb88 <__stack+0x289>
 b6e:	23 2d       	mov	r18, r3
 b70:	2e 7f       	andi	r18, 0xFE	; 254
 b72:	a2 2e       	mov	r10, r18
 b74:	89 14       	cp	r8, r9
 b76:	58 f4       	brcc	.+22     	; 0xb8e <__stack+0x28f>
 b78:	34 fe       	sbrs	r3, 4
 b7a:	0b c0       	rjmp	.+22     	; 0xb92 <__stack+0x293>
 b7c:	32 fc       	sbrc	r3, 2
 b7e:	09 c0       	rjmp	.+18     	; 0xb92 <__stack+0x293>
 b80:	83 2d       	mov	r24, r3
 b82:	8e 7e       	andi	r24, 0xEE	; 238
 b84:	a8 2e       	mov	r10, r24
 b86:	05 c0       	rjmp	.+10     	; 0xb92 <__stack+0x293>
 b88:	b8 2c       	mov	r11, r8
 b8a:	a3 2c       	mov	r10, r3
 b8c:	03 c0       	rjmp	.+6      	; 0xb94 <__stack+0x295>
 b8e:	b8 2c       	mov	r11, r8
 b90:	01 c0       	rjmp	.+2      	; 0xb94 <__stack+0x295>
 b92:	b9 2c       	mov	r11, r9
 b94:	a4 fe       	sbrs	r10, 4
 b96:	0f c0       	rjmp	.+30     	; 0xbb6 <__stack+0x2b7>
 b98:	fe 01       	movw	r30, r28
 b9a:	e8 0d       	add	r30, r8
 b9c:	f1 1d       	adc	r31, r1
 b9e:	80 81       	ld	r24, Z
 ba0:	80 33       	cpi	r24, 0x30	; 48
 ba2:	21 f4       	brne	.+8      	; 0xbac <__stack+0x2ad>
 ba4:	9a 2d       	mov	r25, r10
 ba6:	99 7e       	andi	r25, 0xE9	; 233
 ba8:	a9 2e       	mov	r10, r25
 baa:	09 c0       	rjmp	.+18     	; 0xbbe <__stack+0x2bf>
 bac:	a2 fe       	sbrs	r10, 2
 bae:	06 c0       	rjmp	.+12     	; 0xbbc <__stack+0x2bd>
 bb0:	b3 94       	inc	r11
 bb2:	b3 94       	inc	r11
 bb4:	04 c0       	rjmp	.+8      	; 0xbbe <__stack+0x2bf>
 bb6:	8a 2d       	mov	r24, r10
 bb8:	86 78       	andi	r24, 0x86	; 134
 bba:	09 f0       	breq	.+2      	; 0xbbe <__stack+0x2bf>
 bbc:	b3 94       	inc	r11
 bbe:	a3 fc       	sbrc	r10, 3
 bc0:	11 c0       	rjmp	.+34     	; 0xbe4 <__stack+0x2e5>
 bc2:	a0 fe       	sbrs	r10, 0
 bc4:	06 c0       	rjmp	.+12     	; 0xbd2 <__stack+0x2d3>
 bc6:	b2 14       	cp	r11, r2
 bc8:	88 f4       	brcc	.+34     	; 0xbec <__stack+0x2ed>
 bca:	28 0c       	add	r2, r8
 bcc:	92 2c       	mov	r9, r2
 bce:	9b 18       	sub	r9, r11
 bd0:	0e c0       	rjmp	.+28     	; 0xbee <__stack+0x2ef>
 bd2:	b2 14       	cp	r11, r2
 bd4:	60 f4       	brcc	.+24     	; 0xbee <__stack+0x2ef>
 bd6:	b6 01       	movw	r22, r12
 bd8:	80 e2       	ldi	r24, 0x20	; 32
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 be0:	b3 94       	inc	r11
 be2:	f7 cf       	rjmp	.-18     	; 0xbd2 <__stack+0x2d3>
 be4:	b2 14       	cp	r11, r2
 be6:	18 f4       	brcc	.+6      	; 0xbee <__stack+0x2ef>
 be8:	2b 18       	sub	r2, r11
 bea:	02 c0       	rjmp	.+4      	; 0xbf0 <__stack+0x2f1>
 bec:	98 2c       	mov	r9, r8
 bee:	21 2c       	mov	r2, r1
 bf0:	a4 fe       	sbrs	r10, 4
 bf2:	10 c0       	rjmp	.+32     	; 0xc14 <__stack+0x315>
 bf4:	b6 01       	movw	r22, r12
 bf6:	80 e3       	ldi	r24, 0x30	; 48
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 bfe:	a2 fe       	sbrs	r10, 2
 c00:	17 c0       	rjmp	.+46     	; 0xc30 <__stack+0x331>
 c02:	a1 fc       	sbrc	r10, 1
 c04:	03 c0       	rjmp	.+6      	; 0xc0c <__stack+0x30d>
 c06:	88 e7       	ldi	r24, 0x78	; 120
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	02 c0       	rjmp	.+4      	; 0xc10 <__stack+0x311>
 c0c:	88 e5       	ldi	r24, 0x58	; 88
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	b6 01       	movw	r22, r12
 c12:	0c c0       	rjmp	.+24     	; 0xc2c <__stack+0x32d>
 c14:	8a 2d       	mov	r24, r10
 c16:	86 78       	andi	r24, 0x86	; 134
 c18:	59 f0       	breq	.+22     	; 0xc30 <__stack+0x331>
 c1a:	a1 fe       	sbrs	r10, 1
 c1c:	02 c0       	rjmp	.+4      	; 0xc22 <__stack+0x323>
 c1e:	8b e2       	ldi	r24, 0x2B	; 43
 c20:	01 c0       	rjmp	.+2      	; 0xc24 <__stack+0x325>
 c22:	80 e2       	ldi	r24, 0x20	; 32
 c24:	a7 fc       	sbrc	r10, 7
 c26:	8d e2       	ldi	r24, 0x2D	; 45
 c28:	b6 01       	movw	r22, r12
 c2a:	90 e0       	ldi	r25, 0x00	; 0
 c2c:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 c30:	89 14       	cp	r8, r9
 c32:	38 f4       	brcc	.+14     	; 0xc42 <__stack+0x343>
 c34:	b6 01       	movw	r22, r12
 c36:	80 e3       	ldi	r24, 0x30	; 48
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 c3e:	9a 94       	dec	r9
 c40:	f7 cf       	rjmp	.-18     	; 0xc30 <__stack+0x331>
 c42:	8a 94       	dec	r8
 c44:	f3 01       	movw	r30, r6
 c46:	e8 0d       	add	r30, r8
 c48:	f1 1d       	adc	r31, r1
 c4a:	80 81       	ld	r24, Z
 c4c:	b6 01       	movw	r22, r12
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 c54:	81 10       	cpse	r8, r1
 c56:	f5 cf       	rjmp	.-22     	; 0xc42 <__stack+0x343>
 c58:	22 20       	and	r2, r2
 c5a:	09 f4       	brne	.+2      	; 0xc5e <__stack+0x35f>
 c5c:	42 ce       	rjmp	.-892    	; 0x8e2 <vfprintf+0x24>
 c5e:	b6 01       	movw	r22, r12
 c60:	80 e2       	ldi	r24, 0x20	; 32
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	0e 94 56 06 	call	0xcac	; 0xcac <fputc>
 c68:	2a 94       	dec	r2
 c6a:	f6 cf       	rjmp	.-20     	; 0xc58 <__stack+0x359>
 c6c:	f6 01       	movw	r30, r12
 c6e:	86 81       	ldd	r24, Z+6	; 0x06
 c70:	97 81       	ldd	r25, Z+7	; 0x07
 c72:	02 c0       	rjmp	.+4      	; 0xc78 <__stack+0x379>
 c74:	8f ef       	ldi	r24, 0xFF	; 255
 c76:	9f ef       	ldi	r25, 0xFF	; 255
 c78:	2b 96       	adiw	r28, 0x0b	; 11
 c7a:	e2 e1       	ldi	r30, 0x12	; 18
 c7c:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__epilogue_restores__>

00000c80 <strnlen_P>:
 c80:	fc 01       	movw	r30, r24
 c82:	05 90       	lpm	r0, Z+
 c84:	61 50       	subi	r22, 0x01	; 1
 c86:	70 40       	sbci	r23, 0x00	; 0
 c88:	01 10       	cpse	r0, r1
 c8a:	d8 f7       	brcc	.-10     	; 0xc82 <strnlen_P+0x2>
 c8c:	80 95       	com	r24
 c8e:	90 95       	com	r25
 c90:	8e 0f       	add	r24, r30
 c92:	9f 1f       	adc	r25, r31
 c94:	08 95       	ret

00000c96 <strnlen>:
 c96:	fc 01       	movw	r30, r24
 c98:	61 50       	subi	r22, 0x01	; 1
 c9a:	70 40       	sbci	r23, 0x00	; 0
 c9c:	01 90       	ld	r0, Z+
 c9e:	01 10       	cpse	r0, r1
 ca0:	d8 f7       	brcc	.-10     	; 0xc98 <strnlen+0x2>
 ca2:	80 95       	com	r24
 ca4:	90 95       	com	r25
 ca6:	8e 0f       	add	r24, r30
 ca8:	9f 1f       	adc	r25, r31
 caa:	08 95       	ret

00000cac <fputc>:
 cac:	0f 93       	push	r16
 cae:	1f 93       	push	r17
 cb0:	cf 93       	push	r28
 cb2:	df 93       	push	r29
 cb4:	fb 01       	movw	r30, r22
 cb6:	23 81       	ldd	r18, Z+3	; 0x03
 cb8:	21 fd       	sbrc	r18, 1
 cba:	03 c0       	rjmp	.+6      	; 0xcc2 <fputc+0x16>
 cbc:	8f ef       	ldi	r24, 0xFF	; 255
 cbe:	9f ef       	ldi	r25, 0xFF	; 255
 cc0:	2c c0       	rjmp	.+88     	; 0xd1a <fputc+0x6e>
 cc2:	22 ff       	sbrs	r18, 2
 cc4:	16 c0       	rjmp	.+44     	; 0xcf2 <fputc+0x46>
 cc6:	46 81       	ldd	r20, Z+6	; 0x06
 cc8:	57 81       	ldd	r21, Z+7	; 0x07
 cca:	24 81       	ldd	r18, Z+4	; 0x04
 ccc:	35 81       	ldd	r19, Z+5	; 0x05
 cce:	42 17       	cp	r20, r18
 cd0:	53 07       	cpc	r21, r19
 cd2:	44 f4       	brge	.+16     	; 0xce4 <fputc+0x38>
 cd4:	a0 81       	ld	r26, Z
 cd6:	b1 81       	ldd	r27, Z+1	; 0x01
 cd8:	9d 01       	movw	r18, r26
 cda:	2f 5f       	subi	r18, 0xFF	; 255
 cdc:	3f 4f       	sbci	r19, 0xFF	; 255
 cde:	31 83       	std	Z+1, r19	; 0x01
 ce0:	20 83       	st	Z, r18
 ce2:	8c 93       	st	X, r24
 ce4:	26 81       	ldd	r18, Z+6	; 0x06
 ce6:	37 81       	ldd	r19, Z+7	; 0x07
 ce8:	2f 5f       	subi	r18, 0xFF	; 255
 cea:	3f 4f       	sbci	r19, 0xFF	; 255
 cec:	37 83       	std	Z+7, r19	; 0x07
 cee:	26 83       	std	Z+6, r18	; 0x06
 cf0:	14 c0       	rjmp	.+40     	; 0xd1a <fputc+0x6e>
 cf2:	8b 01       	movw	r16, r22
 cf4:	ec 01       	movw	r28, r24
 cf6:	fb 01       	movw	r30, r22
 cf8:	00 84       	ldd	r0, Z+8	; 0x08
 cfa:	f1 85       	ldd	r31, Z+9	; 0x09
 cfc:	e0 2d       	mov	r30, r0
 cfe:	09 95       	icall
 d00:	89 2b       	or	r24, r25
 d02:	e1 f6       	brne	.-72     	; 0xcbc <fputc+0x10>
 d04:	d8 01       	movw	r26, r16
 d06:	16 96       	adiw	r26, 0x06	; 6
 d08:	8d 91       	ld	r24, X+
 d0a:	9c 91       	ld	r25, X
 d0c:	17 97       	sbiw	r26, 0x07	; 7
 d0e:	01 96       	adiw	r24, 0x01	; 1
 d10:	17 96       	adiw	r26, 0x07	; 7
 d12:	9c 93       	st	X, r25
 d14:	8e 93       	st	-X, r24
 d16:	16 97       	sbiw	r26, 0x06	; 6
 d18:	ce 01       	movw	r24, r28
 d1a:	df 91       	pop	r29
 d1c:	cf 91       	pop	r28
 d1e:	1f 91       	pop	r17
 d20:	0f 91       	pop	r16
 d22:	08 95       	ret

00000d24 <__ultoa_invert>:
 d24:	fa 01       	movw	r30, r20
 d26:	aa 27       	eor	r26, r26
 d28:	28 30       	cpi	r18, 0x08	; 8
 d2a:	51 f1       	breq	.+84     	; 0xd80 <__ultoa_invert+0x5c>
 d2c:	20 31       	cpi	r18, 0x10	; 16
 d2e:	81 f1       	breq	.+96     	; 0xd90 <__ultoa_invert+0x6c>
 d30:	e8 94       	clt
 d32:	6f 93       	push	r22
 d34:	6e 7f       	andi	r22, 0xFE	; 254
 d36:	6e 5f       	subi	r22, 0xFE	; 254
 d38:	7f 4f       	sbci	r23, 0xFF	; 255
 d3a:	8f 4f       	sbci	r24, 0xFF	; 255
 d3c:	9f 4f       	sbci	r25, 0xFF	; 255
 d3e:	af 4f       	sbci	r26, 0xFF	; 255
 d40:	b1 e0       	ldi	r27, 0x01	; 1
 d42:	3e d0       	rcall	.+124    	; 0xdc0 <__ultoa_invert+0x9c>
 d44:	b4 e0       	ldi	r27, 0x04	; 4
 d46:	3c d0       	rcall	.+120    	; 0xdc0 <__ultoa_invert+0x9c>
 d48:	67 0f       	add	r22, r23
 d4a:	78 1f       	adc	r23, r24
 d4c:	89 1f       	adc	r24, r25
 d4e:	9a 1f       	adc	r25, r26
 d50:	a1 1d       	adc	r26, r1
 d52:	68 0f       	add	r22, r24
 d54:	79 1f       	adc	r23, r25
 d56:	8a 1f       	adc	r24, r26
 d58:	91 1d       	adc	r25, r1
 d5a:	a1 1d       	adc	r26, r1
 d5c:	6a 0f       	add	r22, r26
 d5e:	71 1d       	adc	r23, r1
 d60:	81 1d       	adc	r24, r1
 d62:	91 1d       	adc	r25, r1
 d64:	a1 1d       	adc	r26, r1
 d66:	20 d0       	rcall	.+64     	; 0xda8 <__ultoa_invert+0x84>
 d68:	09 f4       	brne	.+2      	; 0xd6c <__ultoa_invert+0x48>
 d6a:	68 94       	set
 d6c:	3f 91       	pop	r19
 d6e:	2a e0       	ldi	r18, 0x0A	; 10
 d70:	26 9f       	mul	r18, r22
 d72:	11 24       	eor	r1, r1
 d74:	30 19       	sub	r19, r0
 d76:	30 5d       	subi	r19, 0xD0	; 208
 d78:	31 93       	st	Z+, r19
 d7a:	de f6       	brtc	.-74     	; 0xd32 <__ultoa_invert+0xe>
 d7c:	cf 01       	movw	r24, r30
 d7e:	08 95       	ret
 d80:	46 2f       	mov	r20, r22
 d82:	47 70       	andi	r20, 0x07	; 7
 d84:	40 5d       	subi	r20, 0xD0	; 208
 d86:	41 93       	st	Z+, r20
 d88:	b3 e0       	ldi	r27, 0x03	; 3
 d8a:	0f d0       	rcall	.+30     	; 0xdaa <__ultoa_invert+0x86>
 d8c:	c9 f7       	brne	.-14     	; 0xd80 <__ultoa_invert+0x5c>
 d8e:	f6 cf       	rjmp	.-20     	; 0xd7c <__ultoa_invert+0x58>
 d90:	46 2f       	mov	r20, r22
 d92:	4f 70       	andi	r20, 0x0F	; 15
 d94:	40 5d       	subi	r20, 0xD0	; 208
 d96:	4a 33       	cpi	r20, 0x3A	; 58
 d98:	18 f0       	brcs	.+6      	; 0xda0 <__ultoa_invert+0x7c>
 d9a:	49 5d       	subi	r20, 0xD9	; 217
 d9c:	31 fd       	sbrc	r19, 1
 d9e:	40 52       	subi	r20, 0x20	; 32
 da0:	41 93       	st	Z+, r20
 da2:	02 d0       	rcall	.+4      	; 0xda8 <__ultoa_invert+0x84>
 da4:	a9 f7       	brne	.-22     	; 0xd90 <__ultoa_invert+0x6c>
 da6:	ea cf       	rjmp	.-44     	; 0xd7c <__ultoa_invert+0x58>
 da8:	b4 e0       	ldi	r27, 0x04	; 4
 daa:	a6 95       	lsr	r26
 dac:	97 95       	ror	r25
 dae:	87 95       	ror	r24
 db0:	77 95       	ror	r23
 db2:	67 95       	ror	r22
 db4:	ba 95       	dec	r27
 db6:	c9 f7       	brne	.-14     	; 0xdaa <__ultoa_invert+0x86>
 db8:	00 97       	sbiw	r24, 0x00	; 0
 dba:	61 05       	cpc	r22, r1
 dbc:	71 05       	cpc	r23, r1
 dbe:	08 95       	ret
 dc0:	9b 01       	movw	r18, r22
 dc2:	ac 01       	movw	r20, r24
 dc4:	0a 2e       	mov	r0, r26
 dc6:	06 94       	lsr	r0
 dc8:	57 95       	ror	r21
 dca:	47 95       	ror	r20
 dcc:	37 95       	ror	r19
 dce:	27 95       	ror	r18
 dd0:	ba 95       	dec	r27
 dd2:	c9 f7       	brne	.-14     	; 0xdc6 <__ultoa_invert+0xa2>
 dd4:	62 0f       	add	r22, r18
 dd6:	73 1f       	adc	r23, r19
 dd8:	84 1f       	adc	r24, r20
 dda:	95 1f       	adc	r25, r21
 ddc:	a0 1d       	adc	r26, r0
 dde:	08 95       	ret

00000de0 <__prologue_saves__>:
 de0:	2f 92       	push	r2
 de2:	3f 92       	push	r3
 de4:	4f 92       	push	r4
 de6:	5f 92       	push	r5
 de8:	6f 92       	push	r6
 dea:	7f 92       	push	r7
 dec:	8f 92       	push	r8
 dee:	9f 92       	push	r9
 df0:	af 92       	push	r10
 df2:	bf 92       	push	r11
 df4:	cf 92       	push	r12
 df6:	df 92       	push	r13
 df8:	ef 92       	push	r14
 dfa:	ff 92       	push	r15
 dfc:	0f 93       	push	r16
 dfe:	1f 93       	push	r17
 e00:	cf 93       	push	r28
 e02:	df 93       	push	r29
 e04:	cd b7       	in	r28, 0x3d	; 61
 e06:	de b7       	in	r29, 0x3e	; 62
 e08:	ca 1b       	sub	r28, r26
 e0a:	db 0b       	sbc	r29, r27
 e0c:	0f b6       	in	r0, 0x3f	; 63
 e0e:	f8 94       	cli
 e10:	de bf       	out	0x3e, r29	; 62
 e12:	0f be       	out	0x3f, r0	; 63
 e14:	cd bf       	out	0x3d, r28	; 61
 e16:	09 94       	ijmp

00000e18 <__epilogue_restores__>:
 e18:	2a 88       	ldd	r2, Y+18	; 0x12
 e1a:	39 88       	ldd	r3, Y+17	; 0x11
 e1c:	48 88       	ldd	r4, Y+16	; 0x10
 e1e:	5f 84       	ldd	r5, Y+15	; 0x0f
 e20:	6e 84       	ldd	r6, Y+14	; 0x0e
 e22:	7d 84       	ldd	r7, Y+13	; 0x0d
 e24:	8c 84       	ldd	r8, Y+12	; 0x0c
 e26:	9b 84       	ldd	r9, Y+11	; 0x0b
 e28:	aa 84       	ldd	r10, Y+10	; 0x0a
 e2a:	b9 84       	ldd	r11, Y+9	; 0x09
 e2c:	c8 84       	ldd	r12, Y+8	; 0x08
 e2e:	df 80       	ldd	r13, Y+7	; 0x07
 e30:	ee 80       	ldd	r14, Y+6	; 0x06
 e32:	fd 80       	ldd	r15, Y+5	; 0x05
 e34:	0c 81       	ldd	r16, Y+4	; 0x04
 e36:	1b 81       	ldd	r17, Y+3	; 0x03
 e38:	aa 81       	ldd	r26, Y+2	; 0x02
 e3a:	b9 81       	ldd	r27, Y+1	; 0x01
 e3c:	ce 0f       	add	r28, r30
 e3e:	d1 1d       	adc	r29, r1
 e40:	0f b6       	in	r0, 0x3f	; 63
 e42:	f8 94       	cli
 e44:	de bf       	out	0x3e, r29	; 62
 e46:	0f be       	out	0x3f, r0	; 63
 e48:	cd bf       	out	0x3d, r28	; 61
 e4a:	ed 01       	movw	r28, r26
 e4c:	08 95       	ret

00000e4e <_exit>:
 e4e:	f8 94       	cli

00000e50 <__stop_program>:
 e50:	ff cf       	rjmp	.-2      	; 0xe50 <__stop_program>
